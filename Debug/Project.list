
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ec  080051ec  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080051ec  080051ec  000151ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f4  080051f4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080051fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba0  20000060  0800525c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c00  0800525c  00024c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001646a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e6  00000000  00000000  0003653d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c3  00000000  00000000  0003b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005121  00000000  00000000  0003c4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016386  00000000  00000000  00041604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a280b  00000000  00000000  0005798a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e18  00000000  00000000  000fa198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800514c 	.word	0x0800514c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800514c 	.word	0x0800514c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LL_RCC_HSI_Enable+0x1c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <LL_RCC_HSI_Enable+0x1c>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40023800 	.word	0x40023800

080004fc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <LL_RCC_HSI_IsReady+0x20>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	2b02      	cmp	r3, #2
 800050a:	bf0c      	ite	eq
 800050c:	2301      	moveq	r3, #1
 800050e:	2300      	movne	r3, #0
 8000510:	b2db      	uxtb	r3, r3
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40023800 	.word	0x40023800

08000520 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	4904      	ldr	r1, [pc, #16]	; (8000548 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000536:	4313      	orrs	r3, r2
 8000538:	600b      	str	r3, [r1, #0]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800

0800054c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <LL_RCC_SetSysClkSource+0x24>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f023 0203 	bic.w	r2, r3, #3
 800055c:	4904      	ldr	r1, [pc, #16]	; (8000570 <LL_RCC_SetSysClkSource+0x24>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	608b      	str	r3, [r1, #8]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40023800 	.word	0x40023800

08000574 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_RCC_GetSysClkSource+0x18>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f003 030c 	and.w	r3, r3, #12
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800

08000590 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005a0:	4904      	ldr	r1, [pc, #16]	; (80005b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	608b      	str	r3, [r1, #8]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40023800 	.word	0x40023800

080005b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80005c8:	4904      	ldr	r1, [pc, #16]	; (80005dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	608b      	str	r3, [r1, #8]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40023800 	.word	0x40023800

080005e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80005f0:	4904      	ldr	r1, [pc, #16]	; (8000604 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	608b      	str	r3, [r1, #8]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40023800 	.word	0x40023800

08000608 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <LL_RCC_SetTIMPrescaler+0x28>)
 8000612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000616:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800061a:	4905      	ldr	r1, [pc, #20]	; (8000630 <LL_RCC_SetTIMPrescaler+0x28>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4313      	orrs	r3, r2
 8000620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40023800 	.word	0x40023800

08000634 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <LL_RCC_PLL_Enable+0x1c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <LL_RCC_PLL_Enable+0x1c>)
 800063e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <LL_RCC_PLL_IsReady+0x24>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000664:	bf0c      	ite	eq
 8000666:	2301      	moveq	r3, #1
 8000668:	2300      	movne	r3, #0
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000690:	4013      	ands	r3, r2
 8000692:	68f9      	ldr	r1, [r7, #12]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	4311      	orrs	r1, r2
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	0192      	lsls	r2, r2, #6
 800069c:	430a      	orrs	r2, r1
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006a0:	4313      	orrs	r3, r2
 80006a2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006ac:	4904      	ldr	r1, [pc, #16]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40023800 	.word	0x40023800
 80006c4:	ffbf8000 	.word	0xffbf8000

080006c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4013      	ands	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	40023800 	.word	0x40023800

080006f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <LL_APB1_GRP1_EnableClock+0x2c>)
 800070e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40023800 	.word	0x40023800

08000728 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <LL_SYSCFG_SetEXTISource+0x58>)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	3302      	adds	r3, #2
 800073a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	43db      	mvns	r3, r3
 8000744:	ea02 0103 	and.w	r1, r2, r3
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	0c1b      	lsrs	r3, r3, #16
 800074c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	fa93 f3a3 	rbit	r3, r3
 8000754:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	fab3 f383 	clz	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	fa03 f202 	lsl.w	r2, r3, r2
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <LL_SYSCFG_SetEXTISource+0x58>)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	430a      	orrs	r2, r1
 800076e:	3302      	adds	r3, #2
 8000770:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40013800 	.word	0x40013800

08000784 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <LL_FLASH_SetLatency+0x24>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f023 0207 	bic.w	r2, r3, #7
 8000794:	4904      	ldr	r1, [pc, #16]	; (80007a8 <LL_FLASH_SetLatency+0x24>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	600b      	str	r3, [r1, #0]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023c00 	.word	0x40023c00

080007ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <LL_FLASH_GetLatency+0x18>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0307 	and.w	r3, r3, #7
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023c00 	.word	0x40023c00

080007c8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80007d8:	4904      	ldr	r1, [pc, #16]	; (80007ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	600b      	str	r3, [r1, #0]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40007000 	.word	0x40007000

080007f0 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40007000 	.word	0x40007000

08000818 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	60da      	str	r2, [r3, #12]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	615a      	str	r2, [r3, #20]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa93 f3a3 	rbit	r3, r3
 800087e:	613b      	str	r3, [r7, #16]
  return result;
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	fab3 f383 	clz	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	2103      	movs	r1, #3
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	401a      	ands	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	fa93 f3a3 	rbit	r3, r3
 800089e:	61bb      	str	r3, [r7, #24]
  return result;
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fab3 f383 	clz	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	431a      	orrs	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	601a      	str	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	3724      	adds	r7, #36	; 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b089      	sub	sp, #36	; 0x24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa93 f3a3 	rbit	r3, r3
 80008dc:	613b      	str	r3, [r7, #16]
  return result;
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	2103      	movs	r1, #3
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	401a      	ands	r2, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	fa93 f3a3 	rbit	r3, r3
 80008fc:	61bb      	str	r3, [r7, #24]
  return result;
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	fab3 f383 	clz	r3, r3
 8000904:	b2db      	uxtb	r3, r3
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	431a      	orrs	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	60da      	str	r2, [r3, #12]
}
 8000914:	bf00      	nop
 8000916:	3724      	adds	r7, #36	; 0x24
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	041a      	lsls	r2, r3, #16
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	619a      	str	r2, [r3, #24]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 faca 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f826 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f8ca 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000950:	f000 f878 	bl	8000a44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000954:	f001 fd96 	bl	8002484 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000958:	4a09      	ldr	r2, [pc, #36]	; (8000980 <main+0x40>)
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <main+0x44>)
 800095e:	f001 fddb 	bl	8002518 <osThreadNew>
 8000962:	4603      	mov	r3, r0
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <main+0x48>)
 8000966:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(blinky02, NULL, &blink02_attributes);
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <main+0x4c>)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <main+0x50>)
 800096e:	f001 fdd3 	bl	8002518 <osThreadNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <main+0x54>)
 8000976:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000978:	f001 fda8 	bl	80024cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x3c>
 800097e:	bf00      	nop
 8000980:	0800518c 	.word	0x0800518c
 8000984:	08000b95 	.word	0x08000b95
 8000988:	2000007c 	.word	0x2000007c
 800098c:	080051b0 	.word	0x080051b0
 8000990:	08000ba5 	.word	0x08000ba5
 8000994:	20000080 	.word	0x20000080

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff fef1 	bl	8000784 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80009a2:	bf00      	nop
 80009a4:	f7ff ff02 	bl	80007ac <LL_FLASH_GetLatency>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d1fa      	bne.n	80009a4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 80009ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009b2:	f7ff ff09 	bl	80007c8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80009b6:	2010      	movs	r0, #16
 80009b8:	f7ff fdb2 	bl	8000520 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80009bc:	f7ff fd8e 	bl	80004dc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80009c0:	bf00      	nop
 80009c2:	f7ff fd9b 	bl	80004fc <LL_RCC_HSI_IsReady>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d1fa      	bne.n	80009c2 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 80009cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80009d4:	2110      	movs	r1, #16
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fe50 	bl	800067c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80009dc:	f7ff fe2a 	bl	8000634 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80009e0:	bf00      	nop
 80009e2:	f7ff fe37 	bl	8000654 <LL_RCC_PLL_IsReady>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d1fa      	bne.n	80009e2 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80009ec:	bf00      	nop
 80009ee:	f7ff feff 	bl	80007f0 <LL_PWR_IsActiveFlag_VOS>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0fa      	beq.n	80009ee <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fdc9 	bl	8000590 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80009fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a02:	f7ff fdd9 	bl	80005b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fdea 	bl	80005e0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff fd9d 	bl	800054c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a12:	bf00      	nop
 8000a14:	f7ff fdae 	bl	8000574 <LL_RCC_GetSysClkSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d1fa      	bne.n	8000a14 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8000a1e:	4808      	ldr	r0, [pc, #32]	; (8000a40 <SystemClock_Config+0xa8>)
 8000a20:	f001 fcdc 	bl	80023dc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a24:	200f      	movs	r0, #15
 8000a26:	f000 f909 	bl	8000c3c <HAL_InitTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a30:	f000 f8d2 	bl	8000bd8 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fde7 	bl	8000608 <LL_RCC_SetTIMPrescaler>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	0501bd00 	.word	0x0501bd00

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000a6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a72:	f7ff fe41 	bl	80006f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fe26 	bl	80006c8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000a90:	2307      	movs	r3, #7
 8000a92:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4810      	ldr	r0, [pc, #64]	; (8000adc <MX_USART2_UART_Init+0x98>)
 8000a9a:	f001 f825 	bl	8001ae8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000a9e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000aa2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_USART2_UART_Init+0x9c>)
 8000ac4:	f001 fc26 	bl	8002314 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART2_UART_Init+0x9c>)
 8000aca:	f7ff feb5 	bl	8000838 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_USART2_UART_Init+0x9c>)
 8000ad0:	f7ff fea2 	bl	8000818 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3738      	adds	r7, #56	; 0x38
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000b04:	2004      	movs	r0, #4
 8000b06:	f7ff fddf 	bl	80006c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000b0a:	2080      	movs	r0, #128	; 0x80
 8000b0c:	f7ff fddc 	bl	80006c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff fdd9 	bl	80006c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b16:	2002      	movs	r0, #2
 8000b18:	f7ff fdd6 	bl	80006c8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <MX_GPIO_Init+0xa4>)
 8000b20:	f7ff fefe 	bl	8000920 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000b24:	4919      	ldr	r1, [pc, #100]	; (8000b8c <MX_GPIO_Init+0xa8>)
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fdfe 	bl	8000728 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b30:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b32:	2301      	movs	r3, #1
 8000b34:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fe4c 	bl	80017e0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	4810      	ldr	r0, [pc, #64]	; (8000b90 <MX_GPIO_Init+0xac>)
 8000b50:	f7ff feb7 	bl	80008c2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_GPIO_Init+0xac>)
 8000b5c:	f7ff fe82 	bl	8000864 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b60:	2320      	movs	r3, #32
 8000b62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b64:	2301      	movs	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_GPIO_Init+0xa4>)
 8000b7a:	f000 ffb5 	bl	8001ae8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	00f00003 	.word	0x00f00003
 8000b90:	40020800 	.word	0x40020800

08000b94 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f001 fd4d 	bl	800263c <osDelay>
 8000ba2:	e7fb      	b.n	8000b9c <StartBlink01+0x8>

08000ba4 <blinky02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinky02 */
void blinky02(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinky02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fd45 	bl	800263c <osDelay>
 8000bb2:	e7fb      	b.n	8000bac <blinky02+0x8>

08000bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc6:	f000 f9ab 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40014000 	.word	0x40014000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_MspInit+0x54>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <HAL_MspInit+0x54>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x54>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_MspInit+0x54>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_MspInit+0x54>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_MspInit+0x54>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	210f      	movs	r1, #15
 8000c26:	f06f 0001 	mvn.w	r0, #1
 8000c2a:	f000 fa45 	bl	80010b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_InitTick+0xd0>)
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <HAL_InitTick+0xd0>)
 8000c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_InitTick+0xd0>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c68:	f107 020c 	add.w	r2, r7, #12
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fa6a 	bl	800114c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c78:	f000 fa54 	bl	8001124 <HAL_RCC_GetPCLK2Freq>
 8000c7c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c80:	4a23      	ldr	r2, [pc, #140]	; (8000d10 <HAL_InitTick+0xd4>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	0c9b      	lsrs	r3, r3, #18
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_InitTick+0xd8>)
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <HAL_InitTick+0xdc>)
 8000c90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <HAL_InitTick+0xd8>)
 8000c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c98:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <HAL_InitTick+0xd8>)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_InitTick+0xd8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_InitTick+0xd8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <HAL_InitTick+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000cb2:	4818      	ldr	r0, [pc, #96]	; (8000d14 <HAL_InitTick+0xd8>)
 8000cb4:	f000 fa7c 	bl	80011b0 <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d11b      	bne.n	8000cfe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000cc6:	4813      	ldr	r0, [pc, #76]	; (8000d14 <HAL_InitTick+0xd8>)
 8000cc8:	f000 facc 	bl	8001264 <HAL_TIM_Base_Start_IT>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d111      	bne.n	8000cfe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000cda:	2018      	movs	r0, #24
 8000cdc:	f000 fa08 	bl	80010f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d808      	bhi.n	8000cf8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	2018      	movs	r0, #24
 8000cec:	f000 f9e4 	bl	80010b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_InitTick+0xe0>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e002      	b.n	8000cfe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3730      	adds	r7, #48	; 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	20000084 	.word	0x20000084
 8000d18:	40014000 	.word	0x40014000
 8000d1c:	20000004 	.word	0x20000004

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d52:	f000 fae9 	bl	8001328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000084 	.word	0x20000084

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f004 f94d 	bl	8005050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fdc3 	bl	8000940 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dc8:	080051fc 	.word	0x080051fc
  ldr r2, =_sbss
 8000dcc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dd0:	20004c00 	.word	0x20004c00

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>

08000dd6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d104      	bne.n	8000dee <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
 8000de8:	f7ff fef6 	bl	8000bd8 <Error_Handler>
 8000dec:	e7fe      	b.n	8000dec <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7a1b      	ldrb	r3, [r3, #8]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d904      	bls.n	8000e00 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000df6:	b672      	cpsid	i
}
 8000df8:	bf00      	nop
 8000dfa:	f7ff feed 	bl	8000bd8 <Error_Handler>
 8000dfe:	e7fe      	b.n	8000dfe <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7a1b      	ldrb	r3, [r3, #8]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	b2d1      	uxtb	r1, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	7211      	strb	r1, [r2, #8]
 8000e0c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8000e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e16:	f383 8811 	msr	BASEPRI, r3
 8000e1a:	f3bf 8f6f 	isb	sy
 8000e1e:	f3bf 8f4f 	dsb	sy
 8000e22:	60fa      	str	r2, [r7, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d104      	bne.n	8000e4e <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
 8000e48:	f7ff fec6 	bl	8000bd8 <Error_Handler>
 8000e4c:	e7fe      	b.n	8000e4c <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7a1b      	ldrb	r3, [r3, #8]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7a1b      	ldrb	r3, [r3, #8]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d904      	bls.n	8000e6c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e62:	b672      	cpsid	i
}
 8000e64:	bf00      	nop
 8000e66:	f7ff feb7 	bl	8000bd8 <Error_Handler>
 8000e6a:	e7fe      	b.n	8000e6a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7a1b      	ldrb	r3, [r3, #8]
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000e80:	bf00      	nop
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d104      	bne.n	8000ea2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
 8000e9c:	f7ff fe9c 	bl	8000bd8 <Error_Handler>
 8000ea0:	e7fe      	b.n	8000ea0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff96 	bl	8000dd6 <stm32_lock_acquire>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
 8000ec4:	f7ff fe88 	bl	8000bd8 <Error_Handler>
 8000ec8:	e7fe      	b.n	8000ec8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffb2 	bl	8000e36 <stm32_lock_release>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f8cc 	bl	80010a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f7ff fe96 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe68 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	200000d8 	.word	0x200000d8

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff4c 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ca:	f7ff ff61 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	6978      	ldr	r0, [r7, #20]
 80010d6:	f7ff ffb1 	bl	800103c <NVIC_EncodePriority>
 80010da:	4602      	mov	r2, r0
 80010dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff80 	bl	8000fe8 <__NVIC_SetPriority>
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff54 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_RCC_GetHCLKFreq+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000

08001124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001128:	f7ff fff0 	bl	800110c <HAL_RCC_GetHCLKFreq>
 800112c:	4602      	mov	r2, r0
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	0b5b      	lsrs	r3, r3, #13
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	4903      	ldr	r1, [pc, #12]	; (8001148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	080051e4 	.word	0x080051e4

0800114c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	220f      	movs	r2, #15
 800115a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0203 	and.w	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_RCC_GetClockConfig+0x60>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0207 	and.w	r2, r3, #7
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e041      	b.n	8001246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f839 	bl	800124e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3304      	adds	r3, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4610      	mov	r0, r2
 80011f0:	f000 f9ca 	bl	8001588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d001      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e044      	b.n	8001306 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_TIM_Base_Start_IT+0xb0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d018      	beq.n	80012d0 <HAL_TIM_Base_Start_IT+0x6c>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a6:	d013      	beq.n	80012d0 <HAL_TIM_Base_Start_IT+0x6c>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_TIM_Base_Start_IT+0xb4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00e      	beq.n	80012d0 <HAL_TIM_Base_Start_IT+0x6c>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_TIM_Base_Start_IT+0xb8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d009      	beq.n	80012d0 <HAL_TIM_Base_Start_IT+0x6c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_TIM_Base_Start_IT+0xbc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d004      	beq.n	80012d0 <HAL_TIM_Base_Start_IT+0x6c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <HAL_TIM_Base_Start_IT+0xc0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d111      	bne.n	80012f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d010      	beq.n	8001304 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012f2:	e007      	b.n	8001304 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40010000 	.word	0x40010000
 8001318:	40000400 	.word	0x40000400
 800131c:	40000800 	.word	0x40000800
 8001320:	40000c00 	.word	0x40000c00
 8001324:	40014000 	.word	0x40014000

08001328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d122      	bne.n	8001384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b02      	cmp	r3, #2
 800134a:	d11b      	bne.n	8001384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f06f 0202 	mvn.w	r2, #2
 8001354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f8ee 	bl	800154c <HAL_TIM_IC_CaptureCallback>
 8001370:	e005      	b.n	800137e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f8e0 	bl	8001538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8f1 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b04      	cmp	r3, #4
 8001390:	d122      	bne.n	80013d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b04      	cmp	r3, #4
 800139e:	d11b      	bne.n	80013d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f06f 0204 	mvn.w	r2, #4
 80013a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8c4 	bl	800154c <HAL_TIM_IC_CaptureCallback>
 80013c4:	e005      	b.n	80013d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f8b6 	bl	8001538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f8c7 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d122      	bne.n	800142c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d11b      	bne.n	800142c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f06f 0208 	mvn.w	r2, #8
 80013fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2204      	movs	r2, #4
 8001402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f89a 	bl	800154c <HAL_TIM_IC_CaptureCallback>
 8001418:	e005      	b.n	8001426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f88c 	bl	8001538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f89d 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b10      	cmp	r3, #16
 8001438:	d122      	bne.n	8001480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b10      	cmp	r3, #16
 8001446:	d11b      	bne.n	8001480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0210 	mvn.w	r2, #16
 8001450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2208      	movs	r2, #8
 8001456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f870 	bl	800154c <HAL_TIM_IC_CaptureCallback>
 800146c:	e005      	b.n	800147a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f862 	bl	8001538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f873 	bl	8001560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f06f 0201 	mvn.w	r2, #1
 80014a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fb84 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d10e      	bne.n	80014d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	d107      	bne.n	80014d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f8e2 	bl	800169c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e2:	2b40      	cmp	r3, #64	; 0x40
 80014e4:	d10e      	bne.n	8001504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f0:	2b40      	cmp	r3, #64	; 0x40
 80014f2:	d107      	bne.n	8001504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80014fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f838 	bl	8001574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	2b20      	cmp	r3, #32
 8001510:	d10e      	bne.n	8001530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	2b20      	cmp	r3, #32
 800151e:	d107      	bne.n	8001530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f06f 0220 	mvn.w	r2, #32
 8001528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f8ac 	bl	8001688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <TIM_Base_SetConfig+0xe4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00f      	beq.n	80015c0 <TIM_Base_SetConfig+0x38>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a6:	d00b      	beq.n	80015c0 <TIM_Base_SetConfig+0x38>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a31      	ldr	r2, [pc, #196]	; (8001670 <TIM_Base_SetConfig+0xe8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <TIM_Base_SetConfig+0x38>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <TIM_Base_SetConfig+0xec>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d003      	beq.n	80015c0 <TIM_Base_SetConfig+0x38>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a2f      	ldr	r2, [pc, #188]	; (8001678 <TIM_Base_SetConfig+0xf0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d108      	bne.n	80015d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a25      	ldr	r2, [pc, #148]	; (800166c <TIM_Base_SetConfig+0xe4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01b      	beq.n	8001612 <TIM_Base_SetConfig+0x8a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e0:	d017      	beq.n	8001612 <TIM_Base_SetConfig+0x8a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <TIM_Base_SetConfig+0xe8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <TIM_Base_SetConfig+0x8a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <TIM_Base_SetConfig+0xec>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00f      	beq.n	8001612 <TIM_Base_SetConfig+0x8a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <TIM_Base_SetConfig+0xf0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00b      	beq.n	8001612 <TIM_Base_SetConfig+0x8a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a1f      	ldr	r2, [pc, #124]	; (800167c <TIM_Base_SetConfig+0xf4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <TIM_Base_SetConfig+0x8a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <TIM_Base_SetConfig+0xf8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d003      	beq.n	8001612 <TIM_Base_SetConfig+0x8a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <TIM_Base_SetConfig+0xfc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d108      	bne.n	8001624 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <TIM_Base_SetConfig+0xe4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d103      	bne.n	8001658 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	615a      	str	r2, [r3, #20]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40010000 	.word	0x40010000
 8001670:	40000400 	.word	0x40000400
 8001674:	40000800 	.word	0x40000800
 8001678:	40000c00 	.word	0x40000c00
 800167c:	40014000 	.word	0x40014000
 8001680:	40014400 	.word	0x40014400
 8001684:	40014800 	.word	0x40014800

08001688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <LL_EXTI_EnableIT_0_31+0x20>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <LL_EXTI_EnableIT_0_31+0x20>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <LL_EXTI_DisableIT_0_31+0x24>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	4904      	ldr	r1, [pc, #16]	; (80016f8 <LL_EXTI_DisableIT_0_31+0x24>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40013c00 	.word	0x40013c00

080016fc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4904      	ldr	r1, [pc, #16]	; (800171c <LL_EXTI_EnableEvent_0_31+0x20>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]

}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40013c00 	.word	0x40013c00

08001720 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <LL_EXTI_DisableEvent_0_31+0x24>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	43db      	mvns	r3, r3
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001732:	4013      	ands	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40013c00 	.word	0x40013c00

08001748 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4904      	ldr	r1, [pc, #16]	; (8001768 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]

}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40013c00 	.word	0x40013c00

0800176c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	43db      	mvns	r3, r3
 800177c:	4904      	ldr	r1, [pc, #16]	; (8001790 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800177e:	4013      	ands	r3, r2
 8001780:	608b      	str	r3, [r1, #8]

}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40013c00 	.word	0x40013c00

08001794 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	4904      	ldr	r1, [pc, #16]	; (80017b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4904      	ldr	r1, [pc, #16]	; (80017dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	60cb      	str	r3, [r1, #12]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d065      	beq.n	80018c0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d06b      	beq.n	80018d4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	795b      	ldrb	r3, [r3, #5]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d01c      	beq.n	800183e <LL_EXTI_Init+0x5e>
 8001804:	2b02      	cmp	r3, #2
 8001806:	dc25      	bgt.n	8001854 <LL_EXTI_Init+0x74>
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <LL_EXTI_Init+0x32>
 800180c:	2b01      	cmp	r3, #1
 800180e:	d00b      	beq.n	8001828 <LL_EXTI_Init+0x48>
 8001810:	e020      	b.n	8001854 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff82 	bl	8001720 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff45 	bl	80016b0 <LL_EXTI_EnableIT_0_31>
          break;
 8001826:	e018      	b.n	800185a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff51 	bl	80016d4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff60 	bl	80016fc <LL_EXTI_EnableEvent_0_31>
          break;
 800183c:	e00d      	b.n	800185a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff34 	bl	80016b0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff55 	bl	80016fc <LL_EXTI_EnableEvent_0_31>
          break;
 8001852:	e002      	b.n	800185a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
          break;
 8001858:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	799b      	ldrb	r3, [r3, #6]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d038      	beq.n	80018d4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	799b      	ldrb	r3, [r3, #6]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d01c      	beq.n	80018a4 <LL_EXTI_Init+0xc4>
 800186a:	2b03      	cmp	r3, #3
 800186c:	dc25      	bgt.n	80018ba <LL_EXTI_Init+0xda>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d002      	beq.n	8001878 <LL_EXTI_Init+0x98>
 8001872:	2b02      	cmp	r3, #2
 8001874:	d00b      	beq.n	800188e <LL_EXTI_Init+0xae>
 8001876:	e020      	b.n	80018ba <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff9b 	bl	80017b8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff5e 	bl	8001748 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800188c:	e022      	b.n	80018d4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff6a 	bl	800176c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff79 	bl	8001794 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80018a2:	e017      	b.n	80018d4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff4d 	bl	8001748 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff6e 	bl	8001794 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80018b8:	e00c      	b.n	80018d4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
            break;
 80018be:	e009      	b.n	80018d4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff05 	bl	80016d4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff26 	bl	8001720 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <LL_GPIO_SetPinMode>:
{
 80018de:	b480      	push	{r7}
 80018e0:	b089      	sub	sp, #36	; 0x24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	613b      	str	r3, [r7, #16]
  return result;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2103      	movs	r1, #3
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	401a      	ands	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	61bb      	str	r3, [r7, #24]
  return result;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	431a      	orrs	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	3724      	adds	r7, #36	; 0x24
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_GPIO_SetPinOutputType>:
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	431a      	orrs	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	605a      	str	r2, [r3, #4]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_GPIO_SetPinSpeed>:
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	613b      	str	r3, [r7, #16]
  return result;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2103      	movs	r1, #3
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	61bb      	str	r3, [r7, #24]
  return result;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	609a      	str	r2, [r3, #8]
}
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_GPIO_SetPinPull>:
{
 80019ca:	b480      	push	{r7}
 80019cc:	b089      	sub	sp, #36	; 0x24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	613b      	str	r3, [r7, #16]
  return result;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2103      	movs	r1, #3
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	401a      	ands	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	61bb      	str	r3, [r7, #24]
  return result;
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	60da      	str	r2, [r3, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3724      	adds	r7, #36	; 0x24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_GPIO_SetAFPin_0_7>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a1a      	ldr	r2, [r3, #32]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	613b      	str	r3, [r7, #16]
  return result;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	210f      	movs	r1, #15
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	61bb      	str	r3, [r7, #24]
  return result;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	621a      	str	r2, [r3, #32]
}
 8001a7a:	bf00      	nop
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_GPIO_SetAFPin_8_15>:
{
 8001a86:	b480      	push	{r7}
 8001a88:	b089      	sub	sp, #36	; 0x24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	613b      	str	r3, [r7, #16]
  return result;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	210f      	movs	r1, #15
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	61bb      	str	r3, [r7, #24]
  return result;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001adc:	bf00      	nop
 8001ade:	3724      	adds	r7, #36	; 0x24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	613b      	str	r3, [r7, #16]
  return result;
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b12:	e050      	b.n	8001bb6 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d042      	beq.n	8001bb0 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d003      	beq.n	8001b3a <LL_GPIO_Init+0x52>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d10d      	bne.n	8001b56 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	69b9      	ldr	r1, [r7, #24]
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff12 	bl	800196c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fef3 	bl	800193c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	69b9      	ldr	r1, [r7, #24]
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff33 	bl	80019ca <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d11a      	bne.n	8001ba2 <LL_GPIO_Init+0xba>
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	60bb      	str	r3, [r7, #8]
  return result;
 8001b78:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b07      	cmp	r3, #7
 8001b82:	d807      	bhi.n	8001b94 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff4b 	bl	8001a28 <LL_GPIO_SetAFPin_0_7>
 8001b92:	e006      	b.n	8001ba2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff72 	bl	8001a86 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	69b9      	ldr	r1, [r7, #24]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe97 	bl	80018de <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1a7      	bne.n	8001b14 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <LL_RCC_GetSysClkSource>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <LL_RCC_GetSysClkSource+0x18>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <LL_RCC_GetAHBPrescaler>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <LL_RCC_GetAHBPrescaler+0x18>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <LL_RCC_GetAPB1Prescaler>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <LL_RCC_GetAPB2Prescaler>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <LL_RCC_PLL_GetMainSource+0x18>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800

08001c5c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <LL_RCC_PLL_GetN+0x18>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40023800 	.word	0x40023800

08001c78 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <LL_RCC_PLL_GetP+0x18>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <LL_RCC_PLL_GetDivider+0x18>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001cb8:	f000 f820 	bl	8001cfc <RCC_GetSystemClockFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f840 	bl	8001d4c <RCC_GetHCLKClockFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f84e 	bl	8001d78 <RCC_GetPCLK1ClockFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f85a 	bl	8001da0 <RCC_GetPCLK2ClockFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60da      	str	r2, [r3, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001d06:	f7ff ff63 	bl	8001bd0 <LL_RCC_GetSysClkSource>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d00c      	beq.n	8001d2a <RCC_GetSystemClockFreq+0x2e>
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d80f      	bhi.n	8001d34 <RCC_GetSystemClockFreq+0x38>
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <RCC_GetSystemClockFreq+0x22>
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d003      	beq.n	8001d24 <RCC_GetSystemClockFreq+0x28>
 8001d1c:	e00a      	b.n	8001d34 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <RCC_GetSystemClockFreq+0x48>)
 8001d20:	607b      	str	r3, [r7, #4]
      break;
 8001d22:	e00a      	b.n	8001d3a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <RCC_GetSystemClockFreq+0x4c>)
 8001d26:	607b      	str	r3, [r7, #4]
      break;
 8001d28:	e007      	b.n	8001d3a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001d2a:	2008      	movs	r0, #8
 8001d2c:	f000 f84c 	bl	8001dc8 <RCC_PLL_GetFreqDomain_SYS>
 8001d30:	6078      	str	r0, [r7, #4]
      break;
 8001d32:	e002      	b.n	8001d3a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <RCC_GetSystemClockFreq+0x48>)
 8001d36:	607b      	str	r3, [r7, #4]
      break;
 8001d38:	bf00      	nop
  }

  return frequency;
 8001d3a:	687b      	ldr	r3, [r7, #4]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	007a1200 	.word	0x007a1200

08001d4c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001d54:	f7ff ff4a 	bl	8001bec <LL_RCC_GetAHBPrescaler>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <RCC_GetHCLKClockFreq+0x28>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	40d3      	lsrs	r3, r2
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	080051d4 	.word	0x080051d4

08001d78 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d80:	f7ff ff42 	bl	8001c08 <LL_RCC_GetAPB1Prescaler>
 8001d84:	4603      	mov	r3, r0
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <RCC_GetPCLK1ClockFreq+0x24>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	40d3      	lsrs	r3, r2
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	080051e4 	.word	0x080051e4

08001da0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001da8:	f7ff ff3c 	bl	8001c24 <LL_RCC_GetAPB2Prescaler>
 8001dac:	4603      	mov	r3, r0
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <RCC_GetPCLK2ClockFreq+0x24>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	40d3      	lsrs	r3, r2
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	080051e4 	.word	0x080051e4

08001dc8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ddc:	f7ff ff30 	bl	8001c40 <LL_RCC_PLL_GetMainSource>
 8001de0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dee:	d003      	beq.n	8001df8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001df0:	e005      	b.n	8001dfe <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001df4:	617b      	str	r3, [r7, #20]
      break;
 8001df6:	e005      	b.n	8001e04 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001dfa:	617b      	str	r3, [r7, #20]
      break;
 8001dfc:	e002      	b.n	8001e04 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001e00:	617b      	str	r3, [r7, #20]
      break;
 8001e02:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d113      	bne.n	8001e32 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001e0a:	f7ff ff43 	bl	8001c94 <LL_RCC_PLL_GetDivider>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fbb3 f4f2 	udiv	r4, r3, r2
 8001e16:	f7ff ff21 	bl	8001c5c <LL_RCC_PLL_GetN>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	fb03 f404 	mul.w	r4, r3, r4
 8001e20:	f7ff ff2a 	bl	8001c78 <LL_RCC_PLL_GetP>
 8001e24:	4603      	mov	r3, r0
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	3301      	adds	r3, #1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e30:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001e32:	693b      	ldr	r3, [r7, #16]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <LL_USART_IsEnabled>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_USART_SetStopBitsLength>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_USART_SetHWFlowCtrl>:
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	615a      	str	r2, [r3, #20]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_USART_SetBaudRate>:
{
 8001eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ebc:	b0c0      	sub	sp, #256	; 0x100
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ec4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001ec8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001ecc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed8:	f040 810c 	bne.w	80020f4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001edc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001eee:	4622      	mov	r2, r4
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	1891      	adds	r1, r2, r2
 8001ef4:	6639      	str	r1, [r7, #96]	; 0x60
 8001ef6:	415b      	adcs	r3, r3
 8001ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8001efa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001efe:	4621      	mov	r1, r4
 8001f00:	eb12 0801 	adds.w	r8, r2, r1
 8001f04:	4629      	mov	r1, r5
 8001f06:	eb43 0901 	adc.w	r9, r3, r1
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f1e:	4690      	mov	r8, r2
 8001f20:	4699      	mov	r9, r3
 8001f22:	4623      	mov	r3, r4
 8001f24:	eb18 0303 	adds.w	r3, r8, r3
 8001f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f2c:	462b      	mov	r3, r5
 8001f2e:	eb49 0303 	adc.w	r3, r9, r3
 8001f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	469a      	mov	sl, r3
 8001f3e:	4693      	mov	fp, r2
 8001f40:	eb1a 030a 	adds.w	r3, sl, sl
 8001f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f46:	eb4b 030b 	adc.w	r3, fp, fp
 8001f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f54:	f7fe f944 	bl	80001e0 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <LL_USART_SetBaudRate+0x238>)
 8001f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	b29c      	uxth	r4, r3
 8001f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f78:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	464b      	mov	r3, r9
 8001f80:	1891      	adds	r1, r2, r2
 8001f82:	6539      	str	r1, [r7, #80]	; 0x50
 8001f84:	415b      	adcs	r3, r3
 8001f86:	657b      	str	r3, [r7, #84]	; 0x54
 8001f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f8c:	4641      	mov	r1, r8
 8001f8e:	1851      	adds	r1, r2, r1
 8001f90:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f92:	4649      	mov	r1, r9
 8001f94:	414b      	adcs	r3, r1
 8001f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	00cb      	lsls	r3, r1, #3
 8001fa8:	4651      	mov	r1, sl
 8001faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fae:	4651      	mov	r1, sl
 8001fb0:	00ca      	lsls	r2, r1, #3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4642      	mov	r2, r8
 8001fba:	189b      	adds	r3, r3, r2
 8001fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fc0:	464b      	mov	r3, r9
 8001fc2:	460a      	mov	r2, r1
 8001fc4:	eb42 0303 	adc.w	r3, r2, r3
 8001fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001fcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fd6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001fda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001fde:	460b      	mov	r3, r1
 8001fe0:	18db      	adds	r3, r3, r3
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	eb42 0303 	adc.w	r3, r2, r3
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
 8001fec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ff0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001ff4:	f7fe f8f4 	bl	80001e0 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <LL_USART_SetBaudRate+0x238>)
 8002000:	fba3 2301 	umull	r2, r3, r3, r1
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	2264      	movs	r2, #100	; 0x64
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	1acb      	subs	r3, r1, r3
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <LL_USART_SetBaudRate+0x238>)
 8002016:	fba3 2302 	umull	r2, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b29b      	uxth	r3, r3
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	b29b      	uxth	r3, r3
 8002022:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002026:	b29b      	uxth	r3, r3
 8002028:	4423      	add	r3, r4
 800202a:	b29c      	uxth	r4, r3
 800202c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002030:	2200      	movs	r2, #0
 8002032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002036:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800203a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800203e:	4642      	mov	r2, r8
 8002040:	464b      	mov	r3, r9
 8002042:	1891      	adds	r1, r2, r2
 8002044:	63b9      	str	r1, [r7, #56]	; 0x38
 8002046:	415b      	adcs	r3, r3
 8002048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800204e:	4641      	mov	r1, r8
 8002050:	1851      	adds	r1, r2, r1
 8002052:	6339      	str	r1, [r7, #48]	; 0x30
 8002054:	4649      	mov	r1, r9
 8002056:	414b      	adcs	r3, r1
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002066:	4659      	mov	r1, fp
 8002068:	00cb      	lsls	r3, r1, #3
 800206a:	4651      	mov	r1, sl
 800206c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002070:	4651      	mov	r1, sl
 8002072:	00ca      	lsls	r2, r1, #3
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	4603      	mov	r3, r0
 800207a:	4642      	mov	r2, r8
 800207c:	189b      	adds	r3, r3, r2
 800207e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002082:	464b      	mov	r3, r9
 8002084:	460a      	mov	r2, r1
 8002086:	eb42 0303 	adc.w	r3, r2, r3
 800208a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800208e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002092:	2200      	movs	r2, #0
 8002094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002098:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800209c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80020a0:	460b      	mov	r3, r1
 80020a2:	18db      	adds	r3, r3, r3
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a6:	4613      	mov	r3, r2
 80020a8:	eb42 0303 	adc.w	r3, r2, r3
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020b2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80020b6:	f7fe f893 	bl	80001e0 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LL_USART_SetBaudRate+0x238>)
 80020c0:	fba3 1302 	umull	r1, r3, r3, r2
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	2164      	movs	r1, #100	; 0x64
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	3332      	adds	r3, #50	; 0x32
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <LL_USART_SetBaudRate+0x238>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4423      	add	r3, r4
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ec:	609a      	str	r2, [r3, #8]
}
 80020ee:	e108      	b.n	8002302 <LL_USART_SetBaudRate+0x44a>
 80020f0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80020f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020f8:	2200      	movs	r2, #0
 80020fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020fe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002102:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002106:	4642      	mov	r2, r8
 8002108:	464b      	mov	r3, r9
 800210a:	1891      	adds	r1, r2, r2
 800210c:	6239      	str	r1, [r7, #32]
 800210e:	415b      	adcs	r3, r3
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002116:	4641      	mov	r1, r8
 8002118:	1854      	adds	r4, r2, r1
 800211a:	4649      	mov	r1, r9
 800211c:	eb43 0501 	adc.w	r5, r3, r1
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	00eb      	lsls	r3, r5, #3
 800212a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800212e:	00e2      	lsls	r2, r4, #3
 8002130:	4614      	mov	r4, r2
 8002132:	461d      	mov	r5, r3
 8002134:	4643      	mov	r3, r8
 8002136:	18e3      	adds	r3, r4, r3
 8002138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800213c:	464b      	mov	r3, r9
 800213e:	eb45 0303 	adc.w	r3, r5, r3
 8002142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002146:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800214a:	2200      	movs	r2, #0
 800214c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002150:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002160:	4629      	mov	r1, r5
 8002162:	008b      	lsls	r3, r1, #2
 8002164:	4621      	mov	r1, r4
 8002166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800216a:	4621      	mov	r1, r4
 800216c:	008a      	lsls	r2, r1, #2
 800216e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002172:	f7fe f835 	bl	80001e0 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4b65      	ldr	r3, [pc, #404]	; (8002310 <LL_USART_SetBaudRate+0x458>)
 800217c:	fba3 2302 	umull	r2, r3, r3, r2
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b29b      	uxth	r3, r3
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	b29c      	uxth	r4, r3
 8002188:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800218c:	2200      	movs	r2, #0
 800218e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002196:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800219a:	4642      	mov	r2, r8
 800219c:	464b      	mov	r3, r9
 800219e:	1891      	adds	r1, r2, r2
 80021a0:	61b9      	str	r1, [r7, #24]
 80021a2:	415b      	adcs	r3, r3
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021aa:	4641      	mov	r1, r8
 80021ac:	1851      	adds	r1, r2, r1
 80021ae:	6139      	str	r1, [r7, #16]
 80021b0:	4649      	mov	r1, r9
 80021b2:	414b      	adcs	r3, r1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021c2:	4659      	mov	r1, fp
 80021c4:	00cb      	lsls	r3, r1, #3
 80021c6:	4651      	mov	r1, sl
 80021c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021cc:	4651      	mov	r1, sl
 80021ce:	00ca      	lsls	r2, r1, #3
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	4642      	mov	r2, r8
 80021d8:	189b      	adds	r3, r3, r2
 80021da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021de:	464b      	mov	r3, r9
 80021e0:	460a      	mov	r2, r1
 80021e2:	eb42 0303 	adc.w	r3, r2, r3
 80021e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80021ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002204:	4649      	mov	r1, r9
 8002206:	008b      	lsls	r3, r1, #2
 8002208:	4641      	mov	r1, r8
 800220a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800220e:	4641      	mov	r1, r8
 8002210:	008a      	lsls	r2, r1, #2
 8002212:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002216:	f7fd ffe3 	bl	80001e0 <__aeabi_uldivmod>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4611      	mov	r1, r2
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <LL_USART_SetBaudRate+0x458>)
 8002222:	fba3 2301 	umull	r2, r3, r3, r1
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2264      	movs	r2, #100	; 0x64
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	1acb      	subs	r3, r1, r3
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	3332      	adds	r3, #50	; 0x32
 8002234:	4a36      	ldr	r2, [pc, #216]	; (8002310 <LL_USART_SetBaudRate+0x458>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	b29b      	uxth	r3, r3
 800223e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002242:	b29b      	uxth	r3, r3
 8002244:	4423      	add	r3, r4
 8002246:	b29c      	uxth	r4, r3
 8002248:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800224c:	2200      	movs	r2, #0
 800224e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002250:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002252:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002256:	4642      	mov	r2, r8
 8002258:	464b      	mov	r3, r9
 800225a:	1891      	adds	r1, r2, r2
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	415b      	adcs	r3, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002266:	4641      	mov	r1, r8
 8002268:	1851      	adds	r1, r2, r1
 800226a:	6039      	str	r1, [r7, #0]
 800226c:	4649      	mov	r1, r9
 800226e:	414b      	adcs	r3, r1
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800227e:	4659      	mov	r1, fp
 8002280:	00cb      	lsls	r3, r1, #3
 8002282:	4651      	mov	r1, sl
 8002284:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002288:	4651      	mov	r1, sl
 800228a:	00ca      	lsls	r2, r1, #3
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	4603      	mov	r3, r0
 8002292:	4642      	mov	r2, r8
 8002294:	189b      	adds	r3, r3, r2
 8002296:	673b      	str	r3, [r7, #112]	; 0x70
 8002298:	464b      	mov	r3, r9
 800229a:	460a      	mov	r2, r1
 800229c:	eb42 0303 	adc.w	r3, r2, r3
 80022a0:	677b      	str	r3, [r7, #116]	; 0x74
 80022a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80022a6:	2200      	movs	r2, #0
 80022a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80022aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80022b8:	4649      	mov	r1, r9
 80022ba:	008b      	lsls	r3, r1, #2
 80022bc:	4641      	mov	r1, r8
 80022be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022c2:	4641      	mov	r1, r8
 80022c4:	008a      	lsls	r2, r1, #2
 80022c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80022ca:	f7fd ff89 	bl	80001e0 <__aeabi_uldivmod>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <LL_USART_SetBaudRate+0x458>)
 80022d4:	fba3 1302 	umull	r1, r3, r3, r2
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	2164      	movs	r1, #100	; 0x64
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	3332      	adds	r3, #50	; 0x32
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <LL_USART_SetBaudRate+0x458>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4423      	add	r3, r4
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002300:	609a      	str	r2, [r3, #8]
}
 8002302:	bf00      	nop
 8002304:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002308:	46bd      	mov	sp, r7
 800230a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800230e:	bf00      	nop
 8002310:	51eb851f 	.word	0x51eb851f

08002314 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fd8c 	bl	8001e44 <LL_USART_IsEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d149      	bne.n	80023c6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800233a:	f023 030c 	bic.w	r3, r3, #12
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6851      	ldr	r1, [r2, #4]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	68d2      	ldr	r2, [r2, #12]
 8002346:	4311      	orrs	r1, r2
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	6912      	ldr	r2, [r2, #16]
 800234c:	4311      	orrs	r1, r2
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	6992      	ldr	r2, [r2, #24]
 8002352:	430a      	orrs	r2, r1
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fd83 	bl	8001e6c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fd90 	bl	8001e92 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fc9a 	bl	8001cb0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <LL_USART_Init+0xbc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	e00c      	b.n	80023a4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <LL_USART_Init+0xc0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d102      	bne.n	8002398 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e005      	b.n	80023a4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <LL_USART_Init+0xc4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80023b2:	2300      	movs	r3, #0
 80023b4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fd79 	bl	8001eb8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40004400 	.word	0x40004400
 80023d8:	40011400 	.word	0x40011400

080023dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <LL_SetSystemCoreClock+0x1c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000

080023fc <__NVIC_SetPriority>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	; (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	; (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SysTick_Handler+0x1c>)
 8002456:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002458:	f001 fd28 	bl	8003eac <xTaskGetSchedulerState>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002462:	f002 fb11 	bl	8004a88 <xPortSysTickHandler>
  }
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002474:	2100      	movs	r1, #0
 8002476:	f06f 0004 	mvn.w	r0, #4
 800247a:	f7ff ffbf 	bl	80023fc <__NVIC_SetPriority>
#endif
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800248a:	f3ef 8305 	mrs	r3, IPSR
 800248e:	603b      	str	r3, [r7, #0]
  return(result);
 8002490:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002496:	f06f 0305 	mvn.w	r3, #5
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	e00c      	b.n	80024b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <osKernelInitialize+0x44>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <osKernelInitialize+0x44>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	e002      	b.n	80024b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200000dc 	.word	0x200000dc

080024cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d2:	f3ef 8305 	mrs	r3, IPSR
 80024d6:	603b      	str	r3, [r7, #0]
  return(result);
 80024d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80024de:	f06f 0305 	mvn.w	r3, #5
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	e010      	b.n	8002508 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <osKernelStart+0x48>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d109      	bne.n	8002502 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024ee:	f7ff ffbf 	bl	8002470 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <osKernelStart+0x48>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024f8:	f001 f87c 	bl	80035f4 <vTaskStartScheduler>
      stat = osOK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	e002      	b.n	8002508 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200000dc 	.word	0x200000dc

08002518 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	; 0x38
 800251c:	af04      	add	r7, sp, #16
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002528:	f3ef 8305 	mrs	r3, IPSR
 800252c:	617b      	str	r3, [r7, #20]
  return(result);
 800252e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002530:	2b00      	cmp	r3, #0
 8002532:	d17e      	bne.n	8002632 <osThreadNew+0x11a>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d07b      	beq.n	8002632 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800253e:	2318      	movs	r3, #24
 8002540:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d045      	beq.n	80025de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <osThreadNew+0x48>
        name = attr->name;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <osThreadNew+0x6e>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b38      	cmp	r3, #56	; 0x38
 8002578:	d805      	bhi.n	8002586 <osThreadNew+0x6e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <osThreadNew+0x72>
        return (NULL);
 8002586:	2300      	movs	r3, #0
 8002588:	e054      	b.n	8002634 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <osThreadNew+0xa8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2ba7      	cmp	r3, #167	; 0xa7
 80025a8:	d90a      	bls.n	80025c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <osThreadNew+0xa8>
        mem = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e010      	b.n	80025e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10c      	bne.n	80025e2 <osThreadNew+0xca>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <osThreadNew+0xca>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <osThreadNew+0xca>
          mem = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e001      	b.n	80025e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d110      	bne.n	800260a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025f0:	9202      	str	r2, [sp, #8]
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fe0c 	bl	800321c <xTaskCreateStatic>
 8002604:	4603      	mov	r3, r0
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e013      	b.n	8002632 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d110      	bne.n	8002632 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	b29a      	uxth	r2, r3
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fe57 	bl	80032d6 <xTaskCreate>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <osThreadNew+0x11a>
            hTask = NULL;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002632:	693b      	ldr	r3, [r7, #16]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002644:	f3ef 8305 	mrs	r3, IPSR
 8002648:	60bb      	str	r3, [r7, #8]
  return(result);
 800264a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <osDelay+0x1c>
    stat = osErrorISR;
 8002650:	f06f 0305 	mvn.w	r3, #5
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e007      	b.n	8002668 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 ff92 	bl	800358c <vTaskDelay>
    }
  }

  return (stat);
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <vApplicationGetIdleTaskMemory+0x30>)
 800268a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200000e0 	.word	0x200000e0
 80026a4:	20000188 	.word	0x20000188

080026a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80026b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <vApplicationGetTimerTaskMemory+0x30>)
 80026be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20000388 	.word	0x20000388
 80026d8:	20000430 	.word	0x20000430

080026dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f103 0208 	add.w	r2, r3, #8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f103 0208 	add.w	r2, r3, #8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f103 0208 	add.w	r2, r3, #8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d103      	bne.n	800279e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e00c      	b.n	80027b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3308      	adds	r3, #8
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e002      	b.n	80027ac <vListInsert+0x2e>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d2f6      	bcs.n	80027a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	601a      	str	r2, [r3, #0]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6892      	ldr	r2, [r2, #8]
 8002806:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6852      	ldr	r2, [r2, #4]
 8002810:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	d103      	bne.n	8002824 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <xQueueGenericReset+0x2a>
	__asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	60bb      	str	r3, [r7, #8]
}
 800286a:	bf00      	nop
 800286c:	e7fe      	b.n	800286c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800286e:	f002 f879 	bl	8004964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	68f9      	ldr	r1, [r7, #12]
 800287c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	441a      	add	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	3b01      	subs	r3, #1
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	441a      	add	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d114      	bne.n	80028ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01a      	beq.n	8002902 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3310      	adds	r3, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 f929 	bl	8003b28 <xTaskRemoveFromEventList>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <xQueueGenericReset+0xcc>)
 80028de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	e009      	b.n	8002902 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3310      	adds	r3, #16
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fef2 	bl	80026dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3324      	adds	r3, #36	; 0x24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff feed 	bl	80026dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002902:	f002 f85f 	bl	80049c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	e000ed04 	.word	0xe000ed04

08002914 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	; 0x38
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <xQueueGenericCreateStatic+0x52>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <xQueueGenericCreateStatic+0x56>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <xQueueGenericCreateStatic+0x58>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	623b      	str	r3, [r7, #32]
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <xQueueGenericCreateStatic+0x7e>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <xQueueGenericCreateStatic+0x82>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <xQueueGenericCreateStatic+0x84>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	61fb      	str	r3, [r7, #28]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029b2:	2350      	movs	r3, #80	; 0x50
 80029b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b50      	cmp	r3, #80	; 0x50
 80029ba:	d00a      	beq.n	80029d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	61bb      	str	r3, [r7, #24]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f805 	bl	8002a04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3730      	adds	r7, #48	; 0x30
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e002      	b.n	8002a26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a32:	2101      	movs	r1, #1
 8002a34:	69b8      	ldr	r0, [r7, #24]
 8002a36:	f7ff ff05 	bl	8002844 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08e      	sub	sp, #56	; 0x38
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueGenericSend+0x32>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <xQueueGenericSend+0x40>
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <xQueueGenericSend+0x44>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <xQueueGenericSend+0x46>
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <xQueueGenericSend+0x60>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d103      	bne.n	8002aba <xQueueGenericSend+0x6e>
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <xQueueGenericSend+0x72>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <xQueueGenericSend+0x74>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xQueueGenericSend+0x8e>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	623b      	str	r3, [r7, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ada:	f001 f9e7 	bl	8003eac <xTaskGetSchedulerState>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <xQueueGenericSend+0x9e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <xQueueGenericSend+0xa2>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <xQueueGenericSend+0xa4>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericSend+0xbe>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	61fb      	str	r3, [r7, #28]
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b0a:	f001 ff2b 	bl	8004964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <xQueueGenericSend+0xd4>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d129      	bne.n	8002b74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b26:	f000 fa0b 	bl	8002f40 <prvCopyDataToQueue>
 8002b2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d010      	beq.n	8002b56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	3324      	adds	r3, #36	; 0x24
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fff5 	bl	8003b28 <xTaskRemoveFromEventList>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b44:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <xQueueGenericSend+0x1f8>)
 8002b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	e00a      	b.n	8002b6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <xQueueGenericSend+0x1f8>)
 8002b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b6c:	f001 ff2a 	bl	80049c4 <vPortExitCritical>
				return pdPASS;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e063      	b.n	8002c3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b7a:	f001 ff23 	bl	80049c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e05c      	b.n	8002c3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 f82f 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b92:	2301      	movs	r3, #1
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b96:	f001 ff15 	bl	80049c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b9a:	f000 fd9b 	bl	80036d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b9e:	f001 fee1 	bl	8004964 <vPortEnterCritical>
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d103      	bne.n	8002bb8 <xQueueGenericSend+0x16c>
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bbe:	b25b      	sxtb	r3, r3
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d103      	bne.n	8002bce <xQueueGenericSend+0x182>
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bce:	f001 fef9 	bl	80049c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bd2:	1d3a      	adds	r2, r7, #4
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 f81e 	bl	8003c1c <xTaskCheckForTimeOut>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d124      	bne.n	8002c30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002be6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be8:	f000 faa2 	bl	8003130 <prvIsQueueFull>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d018      	beq.n	8002c24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 ff44 	bl	8003a88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c02:	f000 fa2d 	bl	8003060 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c06:	f000 fd73 	bl	80036f0 <xTaskResumeAll>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f af7c 	bne.w	8002b0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <xQueueGenericSend+0x1f8>)
 8002c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	e772      	b.n	8002b0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c26:	f000 fa1b 	bl	8003060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c2a:	f000 fd61 	bl	80036f0 <xTaskResumeAll>
 8002c2e:	e76c      	b.n	8002b0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c32:	f000 fa15 	bl	8003060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c36:	f000 fd5b 	bl	80036f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3738      	adds	r7, #56	; 0x38
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b090      	sub	sp, #64	; 0x40
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <xQueueGenericSendFromISR+0x3c>
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <xQueueGenericSendFromISR+0x40>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <xQueueGenericSendFromISR+0x42>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d103      	bne.n	8002cb2 <xQueueGenericSendFromISR+0x6a>
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <xQueueGenericSendFromISR+0x6e>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <xQueueGenericSendFromISR+0x70>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	623b      	str	r3, [r7, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cd2:	f001 ff29 	bl	8004b28 <vPortValidateInterruptPriority>
	__asm volatile
 8002cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	61fa      	str	r2, [r7, #28]
 8002cec:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8002cee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <xQueueGenericSendFromISR+0xbc>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d12f      	bne.n	8002d64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d1a:	f000 f911 	bl	8002f40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d112      	bne.n	8002d4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d016      	beq.n	8002d5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	3324      	adds	r3, #36	; 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fef7 	bl	8003b28 <xTaskRemoveFromEventList>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e007      	b.n	8002d5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d52:	3301      	adds	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	b25a      	sxtb	r2, r3
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d62:	e001      	b.n	8002d68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f383 8811 	msr	BASEPRI, r3
}
 8002d72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3740      	adds	r7, #64	; 0x40
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <xQueueReceive+0x30>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	623b      	str	r3, [r7, #32]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <xQueueReceive+0x3e>
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <xQueueReceive+0x42>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueReceive+0x44>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <xQueueReceive+0x5e>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61fb      	str	r3, [r7, #28]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dde:	f001 f865 	bl	8003eac <xTaskGetSchedulerState>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <xQueueReceive+0x6e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <xQueueReceive+0x72>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueReceive+0x74>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueReceive+0x8e>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61bb      	str	r3, [r7, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e0e:	f001 fda9 	bl	8004964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01f      	beq.n	8002e5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e22:	f000 f8f7 	bl	8003014 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00f      	beq.n	8002e56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	3310      	adds	r3, #16
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fe74 	bl	8003b28 <xTaskRemoveFromEventList>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e46:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <xQueueReceive+0x1bc>)
 8002e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e56:	f001 fdb5 	bl	80049c4 <vPortExitCritical>
				return pdPASS;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e069      	b.n	8002f32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e64:	f001 fdae 	bl	80049c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e062      	b.n	8002f32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e72:	f107 0310 	add.w	r3, r7, #16
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 feba 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e80:	f001 fda0 	bl	80049c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e84:	f000 fc26 	bl	80036d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e88:	f001 fd6c 	bl	8004964 <vPortEnterCritical>
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d103      	bne.n	8002ea2 <xQueueReceive+0x122>
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d103      	bne.n	8002eb8 <xQueueReceive+0x138>
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eb8:	f001 fd84 	bl	80049c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ebc:	1d3a      	adds	r2, r7, #4
 8002ebe:	f107 0310 	add.w	r3, r7, #16
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fea9 	bl	8003c1c <xTaskCheckForTimeOut>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d123      	bne.n	8002f18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed2:	f000 f917 	bl	8003104 <prvIsQueueEmpty>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d017      	beq.n	8002f0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	3324      	adds	r3, #36	; 0x24
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fdcf 	bl	8003a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eec:	f000 f8b8 	bl	8003060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ef0:	f000 fbfe 	bl	80036f0 <xTaskResumeAll>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d189      	bne.n	8002e0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <xQueueReceive+0x1bc>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	e780      	b.n	8002e0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0e:	f000 f8a7 	bl	8003060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f12:	f000 fbed 	bl	80036f0 <xTaskResumeAll>
 8002f16:	e77a      	b.n	8002e0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f1a:	f000 f8a1 	bl	8003060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f1e:	f000 fbe7 	bl	80036f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f24:	f000 f8ee 	bl	8003104 <prvIsQueueEmpty>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f43f af6f 	beq.w	8002e0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3730      	adds	r7, #48	; 0x30
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d14d      	bne.n	8003002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ffbc 	bl	8003ee8 <xTaskPriorityDisinherit>
 8002f70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	e043      	b.n	8003002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d119      	bne.n	8002fb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6858      	ldr	r0, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	f002 f884 	bl	8005098 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	441a      	add	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d32b      	bcc.n	8003002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e026      	b.n	8003002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68d8      	ldr	r0, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	f002 f86a 	bl	8005098 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	425b      	negs	r3, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	425b      	negs	r3, r3
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d105      	bne.n	8003002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800300a:	697b      	ldr	r3, [r7, #20]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d018      	beq.n	8003058 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	441a      	add	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d303      	bcc.n	8003048 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68d9      	ldr	r1, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	461a      	mov	r2, r3
 8003052:	6838      	ldr	r0, [r7, #0]
 8003054:	f002 f820 	bl	8005098 <memcpy>
	}
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003068:	f001 fc7c 	bl	8004964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003072:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003074:	e011      	b.n	800309a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d012      	beq.n	80030a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3324      	adds	r3, #36	; 0x24
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fd50 	bl	8003b28 <xTaskRemoveFromEventList>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800308e:	f000 fe27 	bl	8003ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	3b01      	subs	r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	dce9      	bgt.n	8003076 <prvUnlockQueue+0x16>
 80030a2:	e000      	b.n	80030a6 <prvUnlockQueue+0x46>
					break;
 80030a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	22ff      	movs	r2, #255	; 0xff
 80030aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030ae:	f001 fc89 	bl	80049c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030b2:	f001 fc57 	bl	8004964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030be:	e011      	b.n	80030e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3310      	adds	r3, #16
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fd2b 	bl	8003b28 <xTaskRemoveFromEventList>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030d8:	f000 fe02 	bl	8003ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	3b01      	subs	r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dce9      	bgt.n	80030c0 <prvUnlockQueue+0x60>
 80030ec:	e000      	b.n	80030f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030f8:	f001 fc64 	bl	80049c4 <vPortExitCritical>
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800310c:	f001 fc2a 	bl	8004964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003118:	2301      	movs	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e001      	b.n	8003122 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003122:	f001 fc4f 	bl	80049c4 <vPortExitCritical>

	return xReturn;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003138:	f001 fc14 	bl	8004964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	429a      	cmp	r2, r3
 8003146:	d102      	bne.n	800314e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e001      	b.n	8003152 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003152:	f001 fc37 	bl	80049c4 <vPortExitCritical>

	return xReturn;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e014      	b.n	800319a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003170:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <vQueueAddToRegistry+0x50>)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <vQueueAddToRegistry+0x50>)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003186:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <vQueueAddToRegistry+0x50>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003192:	e006      	b.n	80031a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b07      	cmp	r3, #7
 800319e:	d9e7      	bls.n	8003170 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000830 	.word	0x20000830

080031b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031c4:	f001 fbce 	bl	8004964 <vPortEnterCritical>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d103      	bne.n	80031de <vQueueWaitForMessageRestricted+0x2a>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <vQueueWaitForMessageRestricted+0x40>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f4:	f001 fbe6 	bl	80049c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	3324      	adds	r3, #36	; 0x24
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fc61 	bl	8003ad0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ff26 	bl	8003060 <prvUnlockQueue>
	}
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	; 0x38
 8003220:	af04      	add	r7, sp, #16
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	623b      	str	r3, [r7, #32]
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xTaskCreateStatic+0x46>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61fb      	str	r3, [r7, #28]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003262:	23a8      	movs	r3, #168	; 0xa8
 8003264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2ba8      	cmp	r3, #168	; 0xa8
 800326a:	d00a      	beq.n	8003282 <xTaskCreateStatic+0x66>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61bb      	str	r3, [r7, #24]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003282:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01e      	beq.n	80032c8 <xTaskCreateStatic+0xac>
 800328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003298:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	2202      	movs	r2, #2
 800329e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032a2:	2300      	movs	r3, #0
 80032a4:	9303      	str	r3, [sp, #12]
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f850 	bl	8003360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032c2:	f000 f8f3 	bl	80034ac <prvAddNewTaskToReadyList>
 80032c6:	e001      	b.n	80032cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032cc:	697b      	ldr	r3, [r7, #20]
	}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3728      	adds	r7, #40	; 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b08c      	sub	sp, #48	; 0x30
 80032da:	af04      	add	r7, sp, #16
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fc5c 	bl	8004ba8 <pvPortMalloc>
 80032f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032f8:	20a8      	movs	r0, #168	; 0xa8
 80032fa:	f001 fc55 	bl	8004ba8 <pvPortMalloc>
 80032fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
 800330c:	e005      	b.n	800331a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f001 fd16 	bl	8004d40 <vPortFree>
 8003314:	e001      	b.n	800331a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d017      	beq.n	8003350 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003328:	88fa      	ldrh	r2, [r7, #6]
 800332a:	2300      	movs	r3, #0
 800332c:	9303      	str	r3, [sp, #12]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	9302      	str	r3, [sp, #8]
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f80e 	bl	8003360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003344:	69f8      	ldr	r0, [r7, #28]
 8003346:	f000 f8b1 	bl	80034ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e002      	b.n	8003356 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003350:	f04f 33ff 	mov.w	r3, #4294967295
 8003354:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003356:	69bb      	ldr	r3, [r7, #24]
	}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	21a5      	movs	r1, #165	; 0xa5
 800337a:	f001 fe0b 	bl	8004f94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003388:	3b01      	subs	r3, #1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	617b      	str	r3, [r7, #20]
}
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01f      	beq.n	80033fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e012      	b.n	80033ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	7819      	ldrb	r1, [r3, #0]
 80033cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	3334      	adds	r3, #52	; 0x34
 80033d4:	460a      	mov	r2, r1
 80033d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	3301      	adds	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b0f      	cmp	r3, #15
 80033ee:	d9e9      	bls.n	80033c4 <prvInitialiseNewTask+0x64>
 80033f0:	e000      	b.n	80033f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80033f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033fc:	e003      	b.n	8003406 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	2b37      	cmp	r3, #55	; 0x37
 800340a:	d901      	bls.n	8003410 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800340c:	2337      	movs	r3, #55	; 0x37
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	2200      	movs	r2, #0
 8003420:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	3304      	adds	r3, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f978 	bl	800271c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	3318      	adds	r3, #24
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff f973 	bl	800271c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	2200      	movs	r2, #0
 8003450:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	2200      	movs	r2, #0
 8003458:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	3354      	adds	r3, #84	; 0x54
 8003460:	224c      	movs	r2, #76	; 0x4c
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f001 fd95 	bl	8004f94 <memset>
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <prvInitialiseNewTask+0x140>)
 800346e:	659a      	str	r2, [r3, #88]	; 0x58
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <prvInitialiseNewTask+0x144>)
 8003474:	65da      	str	r2, [r3, #92]	; 0x5c
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <prvInitialiseNewTask+0x148>)
 800347a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	69b8      	ldr	r0, [r7, #24]
 8003482:	f001 f941 	bl	8004708 <pxPortInitialiseStack>
 8003486:	4602      	mov	r2, r0
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003498:	bf00      	nop
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20004ac8 	.word	0x20004ac8
 80034a4:	20004b30 	.word	0x20004b30
 80034a8:	20004b98 	.word	0x20004b98

080034ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034b4:	f001 fa56 	bl	8004964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034b8:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <prvAddNewTaskToReadyList+0xc4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <prvAddNewTaskToReadyList+0xc4>)
 80034c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <prvAddNewTaskToReadyList+0xc8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ca:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <prvAddNewTaskToReadyList+0xc8>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034d0:	4b27      	ldr	r3, [pc, #156]	; (8003570 <prvAddNewTaskToReadyList+0xc4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d110      	bne.n	80034fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034d8:	f000 fc26 	bl	8003d28 <prvInitialiseTaskLists>
 80034dc:	e00d      	b.n	80034fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <prvAddNewTaskToReadyList+0xcc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <prvAddNewTaskToReadyList+0xc8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d802      	bhi.n	80034fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034f4:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <prvAddNewTaskToReadyList+0xc8>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <prvAddNewTaskToReadyList+0xd0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3301      	adds	r3, #1
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <prvAddNewTaskToReadyList+0xd0>)
 8003502:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <prvAddNewTaskToReadyList+0xd0>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <prvAddNewTaskToReadyList+0xd4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d903      	bls.n	8003520 <prvAddNewTaskToReadyList+0x74>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <prvAddNewTaskToReadyList+0xd4>)
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <prvAddNewTaskToReadyList+0xd8>)
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff f8fd 	bl	8002736 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800353c:	f001 fa42 	bl	80049c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <prvAddNewTaskToReadyList+0xcc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <prvAddNewTaskToReadyList+0xc8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	429a      	cmp	r2, r3
 8003554:	d207      	bcs.n	8003566 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <prvAddNewTaskToReadyList+0xdc>)
 8003558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000d44 	.word	0x20000d44
 8003574:	20000870 	.word	0x20000870
 8003578:	20000d50 	.word	0x20000d50
 800357c:	20000d60 	.word	0x20000d60
 8003580:	20000d4c 	.word	0x20000d4c
 8003584:	20000874 	.word	0x20000874
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <vTaskDelay+0x60>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <vTaskDelay+0x30>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	60bb      	str	r3, [r7, #8]
}
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035bc:	f000 f88a 	bl	80036d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035c0:	2100      	movs	r1, #0
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fcfe 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035c8:	f000 f892 	bl	80036f0 <xTaskResumeAll>
 80035cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <vTaskDelay+0x64>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000d6c 	.word	0x20000d6c
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003602:	463a      	mov	r2, r7
 8003604:	1d39      	adds	r1, r7, #4
 8003606:	f107 0308 	add.w	r3, r7, #8
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff f832 	bl	8002674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	9202      	str	r2, [sp, #8]
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	2300      	movs	r3, #0
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2300      	movs	r3, #0
 8003620:	460a      	mov	r2, r1
 8003622:	4924      	ldr	r1, [pc, #144]	; (80036b4 <vTaskStartScheduler+0xc0>)
 8003624:	4824      	ldr	r0, [pc, #144]	; (80036b8 <vTaskStartScheduler+0xc4>)
 8003626:	f7ff fdf9 	bl	800321c <xTaskCreateStatic>
 800362a:	4603      	mov	r3, r0
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <vTaskStartScheduler+0xc8>)
 800362e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <vTaskStartScheduler+0xc8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003638:	2301      	movs	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e001      	b.n	8003642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003648:	f000 fd10 	bl	800406c <xTimerCreateTimerTask>
 800364c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d11b      	bne.n	800368c <vTaskStartScheduler+0x98>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	613b      	str	r3, [r7, #16]
}
 8003666:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <vTaskStartScheduler+0xcc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3354      	adds	r3, #84	; 0x54
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <vTaskStartScheduler+0xd0>)
 8003670:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <vTaskStartScheduler+0xd4>)
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <vTaskStartScheduler+0xd8>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003680:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <vTaskStartScheduler+0xdc>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003686:	f001 f8cb 	bl	8004820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800368a:	e00e      	b.n	80036aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d10a      	bne.n	80036aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <vTaskStartScheduler+0xb4>
}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	08005174 	.word	0x08005174
 80036b8:	08003cf9 	.word	0x08003cf9
 80036bc:	20000d68 	.word	0x20000d68
 80036c0:	20000870 	.word	0x20000870
 80036c4:	2000005c 	.word	0x2000005c
 80036c8:	20000d64 	.word	0x20000d64
 80036cc:	20000d50 	.word	0x20000d50
 80036d0:	20000d48 	.word	0x20000d48

080036d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <vTaskSuspendAll+0x18>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	4a03      	ldr	r2, [pc, #12]	; (80036ec <vTaskSuspendAll+0x18>)
 80036e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036e2:	bf00      	nop
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	20000d6c 	.word	0x20000d6c

080036f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036fe:	4b42      	ldr	r3, [pc, #264]	; (8003808 <xTaskResumeAll+0x118>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <xTaskResumeAll+0x2c>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	603b      	str	r3, [r7, #0]
}
 8003718:	bf00      	nop
 800371a:	e7fe      	b.n	800371a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800371c:	f001 f922 	bl	8004964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <xTaskResumeAll+0x118>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	4a38      	ldr	r2, [pc, #224]	; (8003808 <xTaskResumeAll+0x118>)
 8003728:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800372a:	4b37      	ldr	r3, [pc, #220]	; (8003808 <xTaskResumeAll+0x118>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d162      	bne.n	80037f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <xTaskResumeAll+0x11c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05e      	beq.n	80037f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800373a:	e02f      	b.n	800379c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <xTaskResumeAll+0x120>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3318      	adds	r3, #24
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f851 	bl	80027f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3304      	adds	r3, #4
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f84c 	bl	80027f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <xTaskResumeAll+0x124>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d903      	bls.n	800376c <xTaskResumeAll+0x7c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <xTaskResumeAll+0x124>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <xTaskResumeAll+0x128>)
 800377a:	441a      	add	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7fe ffd7 	bl	8002736 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <xTaskResumeAll+0x12c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <xTaskResumeAll+0x130>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800379c:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <xTaskResumeAll+0x120>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1cb      	bne.n	800373c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037aa:	f000 fb5f 	bl	8003e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <xTaskResumeAll+0x134>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037ba:	f000 f847 	bl	800384c <xTaskIncrementTick>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <xTaskResumeAll+0x130>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f1      	bne.n	80037ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <xTaskResumeAll+0x134>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <xTaskResumeAll+0x130>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <xTaskResumeAll+0x138>)
 80037ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037f8:	f001 f8e4 	bl	80049c4 <vPortExitCritical>

	return xAlreadyYielded;
 80037fc:	68bb      	ldr	r3, [r7, #8]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000d6c 	.word	0x20000d6c
 800380c:	20000d44 	.word	0x20000d44
 8003810:	20000d04 	.word	0x20000d04
 8003814:	20000d4c 	.word	0x20000d4c
 8003818:	20000874 	.word	0x20000874
 800381c:	20000870 	.word	0x20000870
 8003820:	20000d58 	.word	0x20000d58
 8003824:	20000d54 	.word	0x20000d54
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <xTaskGetTickCount+0x1c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003838:	687b      	ldr	r3, [r7, #4]
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000d48 	.word	0x20000d48

0800384c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003856:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <xTaskIncrementTick+0x148>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 808f 	bne.w	800397e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003860:	4b4d      	ldr	r3, [pc, #308]	; (8003998 <xTaskIncrementTick+0x14c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003868:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <xTaskIncrementTick+0x14c>)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d120      	bne.n	80038b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003874:	4b49      	ldr	r3, [pc, #292]	; (800399c <xTaskIncrementTick+0x150>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <xTaskIncrementTick+0x48>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	603b      	str	r3, [r7, #0]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <xTaskIncrementTick+0x46>
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <xTaskIncrementTick+0x150>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <xTaskIncrementTick+0x154>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3f      	ldr	r2, [pc, #252]	; (800399c <xTaskIncrementTick+0x150>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4a3f      	ldr	r2, [pc, #252]	; (80039a0 <xTaskIncrementTick+0x154>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <xTaskIncrementTick+0x158>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <xTaskIncrementTick+0x158>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	f000 fadb 	bl	8003e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <xTaskIncrementTick+0x15c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d349      	bcc.n	8003954 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c0:	4b36      	ldr	r3, [pc, #216]	; (800399c <xTaskIncrementTick+0x150>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d104      	bne.n	80038d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <xTaskIncrementTick+0x15c>)
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	601a      	str	r2, [r3, #0]
					break;
 80038d2:	e03f      	b.n	8003954 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d4:	4b31      	ldr	r3, [pc, #196]	; (800399c <xTaskIncrementTick+0x150>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d203      	bcs.n	80038f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038ec:	4a2e      	ldr	r2, [pc, #184]	; (80039a8 <xTaskIncrementTick+0x15c>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038f2:	e02f      	b.n	8003954 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe ff79 	bl	80027f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3318      	adds	r3, #24
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe ff70 	bl	80027f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <xTaskIncrementTick+0x160>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d903      	bls.n	8003924 <xTaskIncrementTick+0xd8>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <xTaskIncrementTick+0x160>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <xTaskIncrementTick+0x164>)
 8003932:	441a      	add	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f7fe fefb 	bl	8002736 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <xTaskIncrementTick+0x168>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	429a      	cmp	r2, r3
 800394c:	d3b8      	bcc.n	80038c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800394e:	2301      	movs	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003952:	e7b5      	b.n	80038c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <xTaskIncrementTick+0x168>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	4915      	ldr	r1, [pc, #84]	; (80039b0 <xTaskIncrementTick+0x164>)
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d901      	bls.n	8003970 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800396c:	2301      	movs	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <xTaskIncrementTick+0x16c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e004      	b.n	8003988 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <xTaskIncrementTick+0x170>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a0d      	ldr	r2, [pc, #52]	; (80039bc <xTaskIncrementTick+0x170>)
 8003986:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003988:	697b      	ldr	r3, [r7, #20]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000d6c 	.word	0x20000d6c
 8003998:	20000d48 	.word	0x20000d48
 800399c:	20000cfc 	.word	0x20000cfc
 80039a0:	20000d00 	.word	0x20000d00
 80039a4:	20000d5c 	.word	0x20000d5c
 80039a8:	20000d64 	.word	0x20000d64
 80039ac:	20000d4c 	.word	0x20000d4c
 80039b0:	20000874 	.word	0x20000874
 80039b4:	20000870 	.word	0x20000870
 80039b8:	20000d58 	.word	0x20000d58
 80039bc:	20000d54 	.word	0x20000d54

080039c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <vTaskSwitchContext+0xb0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <vTaskSwitchContext+0xb4>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039d4:	e046      	b.n	8003a64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80039d6:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <vTaskSwitchContext+0xb4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039dc:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <vTaskSwitchContext+0xb8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e010      	b.n	8003a06 <vTaskSwitchContext+0x46>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <vTaskSwitchContext+0x40>
	__asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	607b      	str	r3, [r7, #4]
}
 80039fc:	bf00      	nop
 80039fe:	e7fe      	b.n	80039fe <vTaskSwitchContext+0x3e>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	491d      	ldr	r1, [pc, #116]	; (8003a7c <vTaskSwitchContext+0xbc>)
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0e4      	beq.n	80039e4 <vTaskSwitchContext+0x24>
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <vTaskSwitchContext+0xbc>)
 8003a26:	4413      	add	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d104      	bne.n	8003a4a <vTaskSwitchContext+0x8a>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <vTaskSwitchContext+0xc0>)
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <vTaskSwitchContext+0xb8>)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <vTaskSwitchContext+0xc0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3354      	adds	r3, #84	; 0x54
 8003a60:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <vTaskSwitchContext+0xc4>)
 8003a62:	6013      	str	r3, [r2, #0]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000d6c 	.word	0x20000d6c
 8003a74:	20000d58 	.word	0x20000d58
 8003a78:	20000d4c 	.word	0x20000d4c
 8003a7c:	20000874 	.word	0x20000874
 8003a80:	20000870 	.word	0x20000870
 8003a84:	2000005c 	.word	0x2000005c

08003a88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60fb      	str	r3, [r7, #12]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <vTaskPlaceOnEventList+0x44>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fe fe61 	bl	800277e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003abc:	2101      	movs	r1, #1
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	f000 fa80 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000870 	.word	0x20000870

08003ad0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	617b      	str	r3, [r7, #20]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <vTaskPlaceOnEventListRestricted+0x54>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3318      	adds	r3, #24
 8003afe:	4619      	mov	r1, r3
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7fe fe18 	bl	8002736 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	68b8      	ldr	r0, [r7, #8]
 8003b16:	f000 fa55 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
	}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000870 	.word	0x20000870

08003b28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	60fb      	str	r3, [r7, #12]
}
 8003b50:	bf00      	nop
 8003b52:	e7fe      	b.n	8003b52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	3318      	adds	r3, #24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fe49 	bl	80027f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <xTaskRemoveFromEventList+0xb0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11d      	bne.n	8003ba2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe fe40 	bl	80027f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <xTaskRemoveFromEventList+0xb4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d903      	bls.n	8003b84 <xTaskRemoveFromEventList+0x5c>
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <xTaskRemoveFromEventList+0xb4>)
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <xTaskRemoveFromEventList+0xb8>)
 8003b92:	441a      	add	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f7fe fdcb 	bl	8002736 <vListInsertEnd>
 8003ba0:	e005      	b.n	8003bae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3318      	adds	r3, #24
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	480e      	ldr	r0, [pc, #56]	; (8003be4 <xTaskRemoveFromEventList+0xbc>)
 8003baa:	f7fe fdc4 	bl	8002736 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <xTaskRemoveFromEventList+0xc0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d905      	bls.n	8003bc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <xTaskRemoveFromEventList+0xc4>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e001      	b.n	8003bcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bcc:	697b      	ldr	r3, [r7, #20]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000d6c 	.word	0x20000d6c
 8003bdc:	20000d4c 	.word	0x20000d4c
 8003be0:	20000874 	.word	0x20000874
 8003be4:	20000d04 	.word	0x20000d04
 8003be8:	20000870 	.word	0x20000870
 8003bec:	20000d58 	.word	0x20000d58

08003bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <vTaskInternalSetTimeOutState+0x24>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <vTaskInternalSetTimeOutState+0x28>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000d5c 	.word	0x20000d5c
 8003c18:	20000d48 	.word	0x20000d48

08003c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	60fb      	str	r3, [r7, #12]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c5e:	f000 fe81 	bl	8004964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <xTaskCheckForTimeOut+0xbc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d102      	bne.n	8003c82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	e023      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <xTaskCheckForTimeOut+0xc0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d007      	beq.n	8003c9e <xTaskCheckForTimeOut+0x82>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e015      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d20b      	bcs.n	8003cc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff9b 	bl	8003bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e004      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f000 fe7b 	bl	80049c4 <vPortExitCritical>

	return xReturn;
 8003cce:	69fb      	ldr	r3, [r7, #28]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000d48 	.word	0x20000d48
 8003cdc:	20000d5c 	.word	0x20000d5c

08003ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <vTaskMissedYield+0x14>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20000d58 	.word	0x20000d58

08003cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d00:	f000 f852 	bl	8003da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <prvIdleTask+0x28>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d9f9      	bls.n	8003d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <prvIdleTask+0x2c>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d1c:	e7f0      	b.n	8003d00 <prvIdleTask+0x8>
 8003d1e:	bf00      	nop
 8003d20:	20000874 	.word	0x20000874
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	e00c      	b.n	8003d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <prvInitialiseTaskLists+0x60>)
 8003d40:	4413      	add	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fcca 	bl	80026dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b37      	cmp	r3, #55	; 0x37
 8003d52:	d9ef      	bls.n	8003d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d54:	480d      	ldr	r0, [pc, #52]	; (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d56:	f7fe fcc1 	bl	80026dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d5a:	480d      	ldr	r0, [pc, #52]	; (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d5c:	f7fe fcbe 	bl	80026dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <prvInitialiseTaskLists+0x6c>)
 8003d62:	f7fe fcbb 	bl	80026dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d66:	480c      	ldr	r0, [pc, #48]	; (8003d98 <prvInitialiseTaskLists+0x70>)
 8003d68:	f7fe fcb8 	bl	80026dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d6c:	480b      	ldr	r0, [pc, #44]	; (8003d9c <prvInitialiseTaskLists+0x74>)
 8003d6e:	f7fe fcb5 	bl	80026dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <prvInitialiseTaskLists+0x78>)
 8003d74:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <prvInitialiseTaskLists+0x7c>)
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000874 	.word	0x20000874
 8003d8c:	20000cd4 	.word	0x20000cd4
 8003d90:	20000ce8 	.word	0x20000ce8
 8003d94:	20000d04 	.word	0x20000d04
 8003d98:	20000d18 	.word	0x20000d18
 8003d9c:	20000d30 	.word	0x20000d30
 8003da0:	20000cfc 	.word	0x20000cfc
 8003da4:	20000d00 	.word	0x20000d00

08003da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dae:	e019      	b.n	8003de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db0:	f000 fdd8 	bl	8004964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <prvCheckTasksWaitingTermination+0x50>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fd15 	bl	80027f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dda:	f000 fdf3 	bl	80049c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f810 	bl	8003e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e1      	bne.n	8003db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000d18 	.word	0x20000d18
 8003dfc:	20000d44 	.word	0x20000d44
 8003e00:	20000d2c 	.word	0x20000d2c

08003e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3354      	adds	r3, #84	; 0x54
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f8c7 	bl	8004fa4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 ff8b 	bl	8004d40 <vPortFree>
				vPortFree( pxTCB );
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 ff88 	bl	8004d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e30:	e018      	b.n	8003e64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d103      	bne.n	8003e44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 ff7f 	bl	8004d40 <vPortFree>
	}
 8003e42:	e00f      	b.n	8003e64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d00a      	beq.n	8003e64 <prvDeleteTCB+0x60>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60fb      	str	r3, [r7, #12]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <prvDeleteTCB+0x5e>
	}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <prvResetNextTaskUnblockTime+0x38>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e84:	e008      	b.n	8003e98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <prvResetNextTaskUnblockTime+0x38>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	20000cfc 	.word	0x20000cfc
 8003ea8:	20000d64 	.word	0x20000d64

08003eac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <xTaskGetSchedulerState+0x34>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	e008      	b.n	8003ed2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <xTaskGetSchedulerState+0x38>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	e001      	b.n	8003ed2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ed2:	687b      	ldr	r3, [r7, #4]
	}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	20000d50 	.word	0x20000d50
 8003ee4:	20000d6c 	.word	0x20000d6c

08003ee8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d056      	beq.n	8003fac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <xTaskPriorityDisinherit+0xd0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d00a      	beq.n	8003f1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60fb      	str	r3, [r7, #12]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60bb      	str	r3, [r7, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d02c      	beq.n	8003fac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d128      	bne.n	8003fac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fc46 	bl	80027f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <xTaskPriorityDisinherit+0xd4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d903      	bls.n	8003f8c <xTaskPriorityDisinherit+0xa4>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <xTaskPriorityDisinherit+0xd4>)
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <xTaskPriorityDisinherit+0xd8>)
 8003f9a:	441a      	add	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7fe fbc7 	bl	8002736 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fac:	697b      	ldr	r3, [r7, #20]
	}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000870 	.word	0x20000870
 8003fbc:	20000d4c 	.word	0x20000d4c
 8003fc0:	20000874 	.word	0x20000874

08003fc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd4:	4b20      	ldr	r3, [pc, #128]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fc08 	bl	80027f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d10a      	bne.n	8003ffe <prvAddCurrentTaskToDelayedList+0x3a>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fee:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4819      	ldr	r0, [pc, #100]	; (800405c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ff8:	f7fe fb9d 	bl	8002736 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ffc:	e026      	b.n	800404c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d209      	bcs.n	800402a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7fe fbab 	bl	800277e <vListInsert>
}
 8004028:	e010      	b.n	800404c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7fe fba1 	bl	800277e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d202      	bcs.n	800404c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004046:	4a08      	ldr	r2, [pc, #32]	; (8004068 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000d48 	.word	0x20000d48
 8004058:	20000870 	.word	0x20000870
 800405c:	20000d30 	.word	0x20000d30
 8004060:	20000d00 	.word	0x20000d00
 8004064:	20000cfc 	.word	0x20000cfc
 8004068:	20000d64 	.word	0x20000d64

0800406c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004076:	f000 fb07 	bl	8004688 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <xTimerCreateTimerTask+0x80>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d021      	beq.n	80040c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800408a:	1d3a      	adds	r2, r7, #4
 800408c:	f107 0108 	add.w	r1, r7, #8
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe fb07 	bl	80026a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	9202      	str	r2, [sp, #8]
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	2302      	movs	r3, #2
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	460a      	mov	r2, r1
 80040ac:	4910      	ldr	r1, [pc, #64]	; (80040f0 <xTimerCreateTimerTask+0x84>)
 80040ae:	4811      	ldr	r0, [pc, #68]	; (80040f4 <xTimerCreateTimerTask+0x88>)
 80040b0:	f7ff f8b4 	bl	800321c <xTaskCreateStatic>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <xTimerCreateTimerTask+0x8c>)
 80040b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <xTimerCreateTimerTask+0x8c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040c2:	2301      	movs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	613b      	str	r3, [r7, #16]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040e2:	697b      	ldr	r3, [r7, #20]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000da0 	.word	0x20000da0
 80040f0:	0800517c 	.word	0x0800517c
 80040f4:	08004231 	.word	0x08004231
 80040f8:	20000da4 	.word	0x20000da4

080040fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800410a:	2300      	movs	r3, #0
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	623b      	str	r3, [r7, #32]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <xTimerGenericCommand+0x98>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d02a      	beq.n	8004188 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b05      	cmp	r3, #5
 8004142:	dc18      	bgt.n	8004176 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004144:	f7ff feb2 	bl	8003eac <xTaskGetSchedulerState>
 8004148:	4603      	mov	r3, r0
 800414a:	2b02      	cmp	r3, #2
 800414c:	d109      	bne.n	8004162 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <xTimerGenericCommand+0x98>)
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	f107 0110 	add.w	r1, r7, #16
 8004156:	2300      	movs	r3, #0
 8004158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415a:	f7fe fc77 	bl	8002a4c <xQueueGenericSend>
 800415e:	6278      	str	r0, [r7, #36]	; 0x24
 8004160:	e012      	b.n	8004188 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <xTimerGenericCommand+0x98>)
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	f107 0110 	add.w	r1, r7, #16
 800416a:	2300      	movs	r3, #0
 800416c:	2200      	movs	r2, #0
 800416e:	f7fe fc6d 	bl	8002a4c <xQueueGenericSend>
 8004172:	6278      	str	r0, [r7, #36]	; 0x24
 8004174:	e008      	b.n	8004188 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <xTimerGenericCommand+0x98>)
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	f107 0110 	add.w	r1, r7, #16
 800417e:	2300      	movs	r3, #0
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	f7fe fd61 	bl	8002c48 <xQueueGenericSendFromISR>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800418a:	4618      	mov	r0, r3
 800418c:	3728      	adds	r7, #40	; 0x28
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000da0 	.word	0x20000da0

08004198 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <prvProcessExpiredTimer+0x94>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fb1d 	bl	80027f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d022      	beq.n	800420a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	18d1      	adds	r1, r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	6978      	ldr	r0, [r7, #20]
 80041d2:	f000 f8d1 	bl	8004378 <prvInsertTimerInActiveList>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01f      	beq.n	800421c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041dc:	2300      	movs	r3, #0
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2300      	movs	r3, #0
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	2100      	movs	r1, #0
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7ff ff88 	bl	80040fc <xTimerGenericCommand>
 80041ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004210:	f023 0301 	bic.w	r3, r3, #1
 8004214:	b2da      	uxtb	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	6978      	ldr	r0, [r7, #20]
 8004222:	4798      	blx	r3
}
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000d98 	.word	0x20000d98

08004230 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004238:	f107 0308 	add.w	r3, r7, #8
 800423c:	4618      	mov	r0, r3
 800423e:	f000 f857 	bl	80042f0 <prvGetNextExpireTime>
 8004242:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4619      	mov	r1, r3
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f803 	bl	8004254 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800424e:	f000 f8d5 	bl	80043fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004252:	e7f1      	b.n	8004238 <prvTimerTask+0x8>

08004254 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800425e:	f7ff fa39 	bl	80036d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f866 	bl	8004338 <prvSampleTimeNow>
 800426c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d130      	bne.n	80042d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <prvProcessTimerOrBlockTask+0x3c>
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	429a      	cmp	r2, r3
 8004280:	d806      	bhi.n	8004290 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004282:	f7ff fa35 	bl	80036f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff85 	bl	8004198 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800428e:	e024      	b.n	80042da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <prvProcessTimerOrBlockTask+0x90>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <prvProcessTimerOrBlockTask+0x50>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <prvProcessTimerOrBlockTask+0x52>
 80042a4:	2300      	movs	r3, #0
 80042a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <prvProcessTimerOrBlockTask+0x94>)
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7fe ff7d 	bl	80031b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042ba:	f7ff fa19 	bl	80036f0 <xTaskResumeAll>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <prvProcessTimerOrBlockTask+0x98>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
}
 80042d4:	e001      	b.n	80042da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042d6:	f7ff fa0b 	bl	80036f0 <xTaskResumeAll>
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000d9c 	.word	0x20000d9c
 80042e8:	20000da0 	.word	0x20000da0
 80042ec:	e000ed04 	.word	0xe000ed04

080042f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <prvGetNextExpireTime+0x44>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <prvGetNextExpireTime+0x16>
 8004302:	2201      	movs	r2, #1
 8004304:	e000      	b.n	8004308 <prvGetNextExpireTime+0x18>
 8004306:	2200      	movs	r2, #0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <prvGetNextExpireTime+0x44>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	e001      	b.n	8004324 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000d98 	.word	0x20000d98

08004338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004340:	f7ff fa74 	bl	800382c <xTaskGetTickCount>
 8004344:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <prvSampleTimeNow+0x3c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	429a      	cmp	r2, r3
 800434e:	d205      	bcs.n	800435c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004350:	f000 f936 	bl	80045c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e002      	b.n	8004362 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <prvSampleTimeNow+0x3c>)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000da8 	.word	0x20000da8

08004378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	429a      	cmp	r2, r3
 800439c:	d812      	bhi.n	80043c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e01b      	b.n	80043ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <prvInsertTimerInActiveList+0x7c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fe f9de 	bl	800277e <vListInsert>
 80043c2:	e012      	b.n	80043ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d206      	bcs.n	80043da <prvInsertTimerInActiveList+0x62>
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e007      	b.n	80043ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <prvInsertTimerInActiveList+0x80>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7fe f9ca 	bl	800277e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043ea:	697b      	ldr	r3, [r7, #20]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000d9c 	.word	0x20000d9c
 80043f8:	20000d98 	.word	0x20000d98

080043fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08e      	sub	sp, #56	; 0x38
 8004400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004402:	e0ca      	b.n	800459a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	da18      	bge.n	800443c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	3304      	adds	r3, #4
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	61fb      	str	r3, [r7, #28]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004432:	6850      	ldr	r0, [r2, #4]
 8004434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004436:	6892      	ldr	r2, [r2, #8]
 8004438:	4611      	mov	r1, r2
 800443a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f2c0 80ab 	blt.w	800459a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d004      	beq.n	800445a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	3304      	adds	r3, #4
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe f9cb 	bl	80027f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800445a:	463b      	mov	r3, r7
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff6b 	bl	8004338 <prvSampleTimeNow>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b09      	cmp	r3, #9
 8004468:	f200 8096 	bhi.w	8004598 <prvProcessReceivedCommands+0x19c>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <prvProcessReceivedCommands+0x78>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	0800449d 	.word	0x0800449d
 8004478:	0800449d 	.word	0x0800449d
 800447c:	0800449d 	.word	0x0800449d
 8004480:	08004511 	.word	0x08004511
 8004484:	08004525 	.word	0x08004525
 8004488:	0800456f 	.word	0x0800456f
 800448c:	0800449d 	.word	0x0800449d
 8004490:	0800449d 	.word	0x0800449d
 8004494:	08004511 	.word	0x08004511
 8004498:	08004525 	.word	0x08004525
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	18d1      	adds	r1, r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044bc:	f7ff ff5c 	bl	8004378 <prvInsertTimerInActiveList>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d069      	beq.n	800459a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05e      	beq.n	800459a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	441a      	add	r2, r3
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	2100      	movs	r1, #0
 80044ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ee:	f7ff fe05 	bl	80040fc <xTimerGenericCommand>
 80044f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d14f      	bne.n	800459a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	61bb      	str	r3, [r7, #24]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	b2da      	uxtb	r2, r3
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004522:	e03a      	b.n	800459a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	617b      	str	r3, [r7, #20]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	18d1      	adds	r1, r2, r3
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004568:	f7ff ff06 	bl	8004378 <prvInsertTimerInActiveList>
					break;
 800456c:	e015      	b.n	800459a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800457c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800457e:	f000 fbdf 	bl	8004d40 <vPortFree>
 8004582:	e00a      	b.n	800459a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	b2da      	uxtb	r2, r3
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004596:	e000      	b.n	800459a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004598:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <prvProcessReceivedCommands+0x1c0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	1d39      	adds	r1, r7, #4
 80045a0:	2200      	movs	r2, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe fbec 	bl	8002d80 <xQueueReceive>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f47f af2a 	bne.w	8004404 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	3730      	adds	r7, #48	; 0x30
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000da0 	.word	0x20000da0

080045c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045c6:	e048      	b.n	800465a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045c8:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <prvSwitchTimerLists+0xc0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d2:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <prvSwitchTimerLists+0xc0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe f905 	bl	80027f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02e      	beq.n	800465a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d90e      	bls.n	800462c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800461a:	4b19      	ldr	r3, [pc, #100]	; (8004680 <prvSwitchTimerLists+0xc0>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f7fe f8aa 	bl	800277e <vListInsert>
 800462a:	e016      	b.n	800465a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800462c:	2300      	movs	r3, #0
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2300      	movs	r3, #0
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	2100      	movs	r1, #0
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff fd60 	bl	80040fc <xTimerGenericCommand>
 800463c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	603b      	str	r3, [r7, #0]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <prvSwitchTimerLists+0xc0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1b1      	bne.n	80045c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <prvSwitchTimerLists+0xc0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <prvSwitchTimerLists+0xc4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a04      	ldr	r2, [pc, #16]	; (8004680 <prvSwitchTimerLists+0xc0>)
 8004670:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004672:	4a04      	ldr	r2, [pc, #16]	; (8004684 <prvSwitchTimerLists+0xc4>)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6013      	str	r3, [r2, #0]
}
 8004678:	bf00      	nop
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000d98 	.word	0x20000d98
 8004684:	20000d9c 	.word	0x20000d9c

08004688 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800468e:	f000 f969 	bl	8004964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d120      	bne.n	80046dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800469a:	4814      	ldr	r0, [pc, #80]	; (80046ec <prvCheckForValidListAndQueue+0x64>)
 800469c:	f7fe f81e 	bl	80026dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046a0:	4813      	ldr	r0, [pc, #76]	; (80046f0 <prvCheckForValidListAndQueue+0x68>)
 80046a2:	f7fe f81b 	bl	80026dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <prvCheckForValidListAndQueue+0x6c>)
 80046a8:	4a10      	ldr	r2, [pc, #64]	; (80046ec <prvCheckForValidListAndQueue+0x64>)
 80046aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046ac:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <prvCheckForValidListAndQueue+0x70>)
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <prvCheckForValidListAndQueue+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046b2:	2300      	movs	r3, #0
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <prvCheckForValidListAndQueue+0x74>)
 80046b8:	4a11      	ldr	r2, [pc, #68]	; (8004700 <prvCheckForValidListAndQueue+0x78>)
 80046ba:	2110      	movs	r1, #16
 80046bc:	200a      	movs	r0, #10
 80046be:	f7fe f929 	bl	8002914 <xQueueGenericCreateStatic>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 80046c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <prvCheckForValidListAndQueue+0x60>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	490b      	ldr	r1, [pc, #44]	; (8004704 <prvCheckForValidListAndQueue+0x7c>)
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fd42 	bl	8003160 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046dc:	f000 f972 	bl	80049c4 <vPortExitCritical>
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000da0 	.word	0x20000da0
 80046ec:	20000d70 	.word	0x20000d70
 80046f0:	20000d84 	.word	0x20000d84
 80046f4:	20000d98 	.word	0x20000d98
 80046f8:	20000d9c 	.word	0x20000d9c
 80046fc:	20000e4c 	.word	0x20000e4c
 8004700:	20000dac 	.word	0x20000dac
 8004704:	08005184 	.word	0x08005184

08004708 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b04      	subs	r3, #4
 8004718:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b04      	subs	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b04      	subs	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004738:	4a0c      	ldr	r2, [pc, #48]	; (800476c <pxPortInitialiseStack+0x64>)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3b14      	subs	r3, #20
 8004742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3b04      	subs	r3, #4
 800474e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f06f 0202 	mvn.w	r2, #2
 8004756:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b20      	subs	r3, #32
 800475c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	08004771 	.word	0x08004771

08004770 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <prvTaskExitError+0x54>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d00a      	beq.n	800479a <prvTaskExitError+0x2a>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	60fb      	str	r3, [r7, #12]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <prvTaskExitError+0x28>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60bb      	str	r3, [r7, #8]
}
 80047ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047ae:	bf00      	nop
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0fc      	beq.n	80047b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	2000000c 	.word	0x2000000c
	...

080047d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <pxCurrentTCBConst2>)
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	6808      	ldr	r0, [r1, #0]
 80047d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	f380 8809 	msr	PSP, r0
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f380 8811 	msr	BASEPRI, r0
 80047ea:	4770      	bx	lr
 80047ec:	f3af 8000 	nop.w

080047f0 <pxCurrentTCBConst2>:
 80047f0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop

080047f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047f8:	4808      	ldr	r0, [pc, #32]	; (800481c <prvPortStartFirstTask+0x24>)
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	6800      	ldr	r0, [r0, #0]
 80047fe:	f380 8808 	msr	MSP, r0
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8814 	msr	CONTROL, r0
 800480a:	b662      	cpsie	i
 800480c:	b661      	cpsie	f
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	df00      	svc	0
 8004818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800481a:	bf00      	nop
 800481c:	e000ed08 	.word	0xe000ed08

08004820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004826:	4b46      	ldr	r3, [pc, #280]	; (8004940 <xPortStartScheduler+0x120>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a46      	ldr	r2, [pc, #280]	; (8004944 <xPortStartScheduler+0x124>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10a      	bne.n	8004846 <xPortStartScheduler+0x26>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	613b      	str	r3, [r7, #16]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004846:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <xPortStartScheduler+0x120>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3f      	ldr	r2, [pc, #252]	; (8004948 <xPortStartScheduler+0x128>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10a      	bne.n	8004866 <xPortStartScheduler+0x46>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60fb      	str	r3, [r7, #12]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <xPortStartScheduler+0x12c>)
 8004868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	22ff      	movs	r2, #255	; 0xff
 8004876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <xPortStartScheduler+0x130>)
 800488c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800488e:	4b31      	ldr	r3, [pc, #196]	; (8004954 <xPortStartScheduler+0x134>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004894:	e009      	b.n	80048aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <xPortStartScheduler+0x134>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3b01      	subs	r3, #1
 800489c:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <xPortStartScheduler+0x134>)
 800489e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b80      	cmp	r3, #128	; 0x80
 80048b4:	d0ef      	beq.n	8004896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <xPortStartScheduler+0x134>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1c3 0307 	rsb	r3, r3, #7
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00a      	beq.n	80048d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60bb      	str	r3, [r7, #8]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048d8:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <xPortStartScheduler+0x134>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <xPortStartScheduler+0x134>)
 80048e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <xPortStartScheduler+0x134>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ea:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <xPortStartScheduler+0x134>)
 80048ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048f6:	4b18      	ldr	r3, [pc, #96]	; (8004958 <xPortStartScheduler+0x138>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <xPortStartScheduler+0x138>)
 80048fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <xPortStartScheduler+0x138>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <xPortStartScheduler+0x138>)
 8004908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800490c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800490e:	f000 f8dd 	bl	8004acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <xPortStartScheduler+0x13c>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004918:	f000 f8fc 	bl	8004b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <xPortStartScheduler+0x140>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <xPortStartScheduler+0x140>)
 8004922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004928:	f7ff ff66 	bl	80047f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800492c:	f7ff f848 	bl	80039c0 <vTaskSwitchContext>
	prvTaskExitError();
 8004930:	f7ff ff1e 	bl	8004770 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	e000ed00 	.word	0xe000ed00
 8004944:	410fc271 	.word	0x410fc271
 8004948:	410fc270 	.word	0x410fc270
 800494c:	e000e400 	.word	0xe000e400
 8004950:	20000e9c 	.word	0x20000e9c
 8004954:	20000ea0 	.word	0x20000ea0
 8004958:	e000ed20 	.word	0xe000ed20
 800495c:	2000000c 	.word	0x2000000c
 8004960:	e000ef34 	.word	0xe000ef34

08004964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	607b      	str	r3, [r7, #4]
}
 800497c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <vPortEnterCritical+0x58>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <vPortEnterCritical+0x58>)
 8004986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <vPortEnterCritical+0x58>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10f      	bne.n	80049b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <vPortEnterCritical+0x5c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	603b      	str	r3, [r7, #0]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <vPortEnterCritical+0x4a>
	}
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	2000000c 	.word	0x2000000c
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <vPortExitCritical+0x50>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <vPortExitCritical+0x24>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <vPortExitCritical+0x50>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <vPortExitCritical+0x50>)
 80049f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <vPortExitCritical+0x50>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <vPortExitCritical+0x42>
 80049fa:	2300      	movs	r3, #0
 80049fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f383 8811 	msr	BASEPRI, r3
}
 8004a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c
	...

08004a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a20:	f3ef 8009 	mrs	r0, PSP
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <pxCurrentTCBConst>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f01e 0f10 	tst.w	lr, #16
 8004a30:	bf08      	it	eq
 8004a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a44:	f380 8811 	msr	BASEPRI, r0
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f7fe ffb6 	bl	80039c0 <vTaskSwitchContext>
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f380 8811 	msr	BASEPRI, r0
 8004a5c:	bc09      	pop	{r0, r3}
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a66:	f01e 0f10 	tst.w	lr, #16
 8004a6a:	bf08      	it	eq
 8004a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a70:	f380 8809 	msr	PSP, r0
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	f3af 8000 	nop.w

08004a80 <pxCurrentTCBConst>:
 8004a80:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop

08004a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004aa2:	f7fe fed3 	bl	800384c <xTaskIncrementTick>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <xPortSysTickHandler+0x40>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f383 8811 	msr	BASEPRI, r3
}
 8004abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <vPortSetupTimerInterrupt+0x34>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <vPortSetupTimerInterrupt+0x38>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <vPortSetupTimerInterrupt+0x3c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <vPortSetupTimerInterrupt+0x40>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <vPortSetupTimerInterrupt+0x44>)
 8004aea:	3b01      	subs	r3, #1
 8004aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <vPortSetupTimerInterrupt+0x34>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010
 8004b04:	e000e018 	.word	0xe000e018
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	10624dd3 	.word	0x10624dd3
 8004b10:	e000e014 	.word	0xe000e014

08004b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b24 <vPortEnableVFP+0x10>
 8004b18:	6801      	ldr	r1, [r0, #0]
 8004b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b1e:	6001      	str	r1, [r0, #0]
 8004b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b22:	bf00      	nop
 8004b24:	e000ed88 	.word	0xe000ed88

08004b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b2e:	f3ef 8305 	mrs	r3, IPSR
 8004b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d914      	bls.n	8004b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <vPortValidateInterruptPriority+0x70>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b44:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <vPortValidateInterruptPriority+0x74>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	7afa      	ldrb	r2, [r7, #11]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d20a      	bcs.n	8004b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <vPortValidateInterruptPriority+0x78>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <vPortValidateInterruptPriority+0x7c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d90a      	bls.n	8004b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	603b      	str	r3, [r7, #0]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <vPortValidateInterruptPriority+0x60>
	}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	e000e3f0 	.word	0xe000e3f0
 8004b9c:	20000e9c 	.word	0x20000e9c
 8004ba0:	e000ed0c 	.word	0xe000ed0c
 8004ba4:	20000ea0 	.word	0x20000ea0

08004ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bb4:	f7fe fd8e 	bl	80036d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bb8:	4b5b      	ldr	r3, [pc, #364]	; (8004d28 <pvPortMalloc+0x180>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bc0:	f000 f920 	bl	8004e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bc4:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <pvPortMalloc+0x184>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 8093 	bne.w	8004cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01d      	beq.n	8004c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004bd8:	2208      	movs	r2, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d014      	beq.n	8004c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f023 0307 	bic.w	r3, r3, #7
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <pvPortMalloc+0x6c>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	617b      	str	r3, [r7, #20]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d06e      	beq.n	8004cf8 <pvPortMalloc+0x150>
 8004c1a:	4b45      	ldr	r3, [pc, #276]	; (8004d30 <pvPortMalloc+0x188>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d869      	bhi.n	8004cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c24:	4b43      	ldr	r3, [pc, #268]	; (8004d34 <pvPortMalloc+0x18c>)
 8004c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c28:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <pvPortMalloc+0x18c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c2e:	e004      	b.n	8004c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d903      	bls.n	8004c4c <pvPortMalloc+0xa4>
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f1      	bne.n	8004c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c4c:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <pvPortMalloc+0x180>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d050      	beq.n	8004cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	4413      	add	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	2308      	movs	r3, #8
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d91f      	bls.n	8004cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	613b      	str	r3, [r7, #16]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cb2:	69b8      	ldr	r0, [r7, #24]
 8004cb4:	f000 f908 	bl	8004ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <pvPortMalloc+0x188>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <pvPortMalloc+0x188>)
 8004cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <pvPortMalloc+0x188>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <pvPortMalloc+0x190>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d203      	bcs.n	8004cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cd2:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <pvPortMalloc+0x188>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <pvPortMalloc+0x190>)
 8004cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <pvPortMalloc+0x184>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <pvPortMalloc+0x194>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <pvPortMalloc+0x194>)
 8004cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cf8:	f7fe fcfa 	bl	80036f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <pvPortMalloc+0x174>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60fb      	str	r3, [r7, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <pvPortMalloc+0x172>
	return pvReturn;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3728      	adds	r7, #40	; 0x28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20004aac 	.word	0x20004aac
 8004d2c:	20004ac0 	.word	0x20004ac0
 8004d30:	20004ab0 	.word	0x20004ab0
 8004d34:	20004aa4 	.word	0x20004aa4
 8004d38:	20004ab4 	.word	0x20004ab4
 8004d3c:	20004ab8 	.word	0x20004ab8

08004d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04d      	beq.n	8004dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d52:	2308      	movs	r3, #8
 8004d54:	425b      	negs	r3, r3
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4413      	add	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <vPortFree+0xb8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <vPortFree+0x44>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	60fb      	str	r3, [r7, #12]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <vPortFree+0x62>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	60bb      	str	r3, [r7, #8]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <vPortFree+0xb8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01e      	beq.n	8004dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11a      	bne.n	8004dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <vPortFree+0xb8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dc8:	f7fe fc84 	bl	80036d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <vPortFree+0xbc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <vPortFree+0xbc>)
 8004dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dda:	6938      	ldr	r0, [r7, #16]
 8004ddc:	f000 f874 	bl	8004ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <vPortFree+0xc0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	4a06      	ldr	r2, [pc, #24]	; (8004e00 <vPortFree+0xc0>)
 8004de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dea:	f7fe fc81 	bl	80036f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20004ac0 	.word	0x20004ac0
 8004dfc:	20004ab0 	.word	0x20004ab0
 8004e00:	20004abc 	.word	0x20004abc

08004e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e10:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <prvHeapInit+0xac>)
 8004e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <prvHeapInit+0xac>)
 8004e34:	4413      	add	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <prvHeapInit+0xb0>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e42:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <prvHeapInit+0xb0>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e50:	2208      	movs	r2, #8
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0307 	bic.w	r3, r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <prvHeapInit+0xb4>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <prvHeapInit+0xb8>)
 8004e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <prvHeapInit+0xbc>)
 8004e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <prvHeapInit+0xc0>)
 8004e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000ea4 	.word	0x20000ea4
 8004eb4:	20004aa4 	.word	0x20004aa4
 8004eb8:	20004aac 	.word	0x20004aac
 8004ebc:	20004ab4 	.word	0x20004ab4
 8004ec0:	20004ab0 	.word	0x20004ab0
 8004ec4:	20004ac0 	.word	0x20004ac0

08004ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ed0:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <prvInsertBlockIntoFreeList+0xac>)
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e002      	b.n	8004edc <prvInsertBlockIntoFreeList+0x14>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d8f7      	bhi.n	8004ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d108      	bne.n	8004f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d118      	bne.n	8004f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <prvInsertBlockIntoFreeList+0xb0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d00d      	beq.n	8004f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	441a      	add	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e008      	b.n	8004f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <prvInsertBlockIntoFreeList+0xb0>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e003      	b.n	8004f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d002      	beq.n	8004f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20004aa4 	.word	0x20004aa4
 8004f78:	20004aac 	.word	0x20004aac

08004f7c <__malloc_lock>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	; (8004f84 <__malloc_lock+0x8>)
 8004f7e:	f7fb bf84 	b.w	8000e8a <__retarget_lock_acquire_recursive>
 8004f82:	bf00      	nop
 8004f84:	200000cc 	.word	0x200000cc

08004f88 <__malloc_unlock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	; (8004f90 <__malloc_unlock+0x8>)
 8004f8a:	f7fb bf92 	b.w	8000eb2 <__retarget_lock_release_recursive>
 8004f8e:	bf00      	nop
 8004f90:	200000cc 	.word	0x200000cc

08004f94 <memset>:
 8004f94:	4402      	add	r2, r0
 8004f96:	4603      	mov	r3, r0
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d100      	bne.n	8004f9e <memset+0xa>
 8004f9c:	4770      	bx	lr
 8004f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa2:	e7f9      	b.n	8004f98 <memset+0x4>

08004fa4 <_reclaim_reent>:
 8004fa4:	4b29      	ldr	r3, [pc, #164]	; (800504c <_reclaim_reent+0xa8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4283      	cmp	r3, r0
 8004faa:	b570      	push	{r4, r5, r6, lr}
 8004fac:	4604      	mov	r4, r0
 8004fae:	d04b      	beq.n	8005048 <_reclaim_reent+0xa4>
 8004fb0:	69c3      	ldr	r3, [r0, #28]
 8004fb2:	b143      	cbz	r3, 8004fc6 <_reclaim_reent+0x22>
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d144      	bne.n	8005044 <_reclaim_reent+0xa0>
 8004fba:	69e3      	ldr	r3, [r4, #28]
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	b111      	cbz	r1, 8004fc6 <_reclaim_reent+0x22>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 f877 	bl	80050b4 <_free_r>
 8004fc6:	6961      	ldr	r1, [r4, #20]
 8004fc8:	b111      	cbz	r1, 8004fd0 <_reclaim_reent+0x2c>
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 f872 	bl	80050b4 <_free_r>
 8004fd0:	69e1      	ldr	r1, [r4, #28]
 8004fd2:	b111      	cbz	r1, 8004fda <_reclaim_reent+0x36>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 f86d 	bl	80050b4 <_free_r>
 8004fda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004fdc:	b111      	cbz	r1, 8004fe4 <_reclaim_reent+0x40>
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 f868 	bl	80050b4 <_free_r>
 8004fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fe6:	b111      	cbz	r1, 8004fee <_reclaim_reent+0x4a>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 f863 	bl	80050b4 <_free_r>
 8004fee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ff0:	b111      	cbz	r1, 8004ff8 <_reclaim_reent+0x54>
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f85e 	bl	80050b4 <_free_r>
 8004ff8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ffa:	b111      	cbz	r1, 8005002 <_reclaim_reent+0x5e>
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f000 f859 	bl	80050b4 <_free_r>
 8005002:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005004:	b111      	cbz	r1, 800500c <_reclaim_reent+0x68>
 8005006:	4620      	mov	r0, r4
 8005008:	f000 f854 	bl	80050b4 <_free_r>
 800500c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800500e:	b111      	cbz	r1, 8005016 <_reclaim_reent+0x72>
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f84f 	bl	80050b4 <_free_r>
 8005016:	6a23      	ldr	r3, [r4, #32]
 8005018:	b1b3      	cbz	r3, 8005048 <_reclaim_reent+0xa4>
 800501a:	4620      	mov	r0, r4
 800501c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005020:	4718      	bx	r3
 8005022:	5949      	ldr	r1, [r1, r5]
 8005024:	b941      	cbnz	r1, 8005038 <_reclaim_reent+0x94>
 8005026:	3504      	adds	r5, #4
 8005028:	69e3      	ldr	r3, [r4, #28]
 800502a:	2d80      	cmp	r5, #128	; 0x80
 800502c:	68d9      	ldr	r1, [r3, #12]
 800502e:	d1f8      	bne.n	8005022 <_reclaim_reent+0x7e>
 8005030:	4620      	mov	r0, r4
 8005032:	f000 f83f 	bl	80050b4 <_free_r>
 8005036:	e7c0      	b.n	8004fba <_reclaim_reent+0x16>
 8005038:	680e      	ldr	r6, [r1, #0]
 800503a:	4620      	mov	r0, r4
 800503c:	f000 f83a 	bl	80050b4 <_free_r>
 8005040:	4631      	mov	r1, r6
 8005042:	e7ef      	b.n	8005024 <_reclaim_reent+0x80>
 8005044:	2500      	movs	r5, #0
 8005046:	e7ef      	b.n	8005028 <_reclaim_reent+0x84>
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	bf00      	nop
 800504c:	2000005c 	.word	0x2000005c

08005050 <__libc_init_array>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4d0d      	ldr	r5, [pc, #52]	; (8005088 <__libc_init_array+0x38>)
 8005054:	4c0d      	ldr	r4, [pc, #52]	; (800508c <__libc_init_array+0x3c>)
 8005056:	1b64      	subs	r4, r4, r5
 8005058:	10a4      	asrs	r4, r4, #2
 800505a:	2600      	movs	r6, #0
 800505c:	42a6      	cmp	r6, r4
 800505e:	d109      	bne.n	8005074 <__libc_init_array+0x24>
 8005060:	4d0b      	ldr	r5, [pc, #44]	; (8005090 <__libc_init_array+0x40>)
 8005062:	4c0c      	ldr	r4, [pc, #48]	; (8005094 <__libc_init_array+0x44>)
 8005064:	f000 f872 	bl	800514c <_init>
 8005068:	1b64      	subs	r4, r4, r5
 800506a:	10a4      	asrs	r4, r4, #2
 800506c:	2600      	movs	r6, #0
 800506e:	42a6      	cmp	r6, r4
 8005070:	d105      	bne.n	800507e <__libc_init_array+0x2e>
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	f855 3b04 	ldr.w	r3, [r5], #4
 8005078:	4798      	blx	r3
 800507a:	3601      	adds	r6, #1
 800507c:	e7ee      	b.n	800505c <__libc_init_array+0xc>
 800507e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005082:	4798      	blx	r3
 8005084:	3601      	adds	r6, #1
 8005086:	e7f2      	b.n	800506e <__libc_init_array+0x1e>
 8005088:	080051f4 	.word	0x080051f4
 800508c:	080051f4 	.word	0x080051f4
 8005090:	080051f4 	.word	0x080051f4
 8005094:	080051f8 	.word	0x080051f8

08005098 <memcpy>:
 8005098:	440a      	add	r2, r1
 800509a:	4291      	cmp	r1, r2
 800509c:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a0:	d100      	bne.n	80050a4 <memcpy+0xc>
 80050a2:	4770      	bx	lr
 80050a4:	b510      	push	{r4, lr}
 80050a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ae:	4291      	cmp	r1, r2
 80050b0:	d1f9      	bne.n	80050a6 <memcpy+0xe>
 80050b2:	bd10      	pop	{r4, pc}

080050b4 <_free_r>:
 80050b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050b6:	2900      	cmp	r1, #0
 80050b8:	d044      	beq.n	8005144 <_free_r+0x90>
 80050ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050be:	9001      	str	r0, [sp, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f1a1 0404 	sub.w	r4, r1, #4
 80050c6:	bfb8      	it	lt
 80050c8:	18e4      	addlt	r4, r4, r3
 80050ca:	f7ff ff57 	bl	8004f7c <__malloc_lock>
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <_free_r+0x94>)
 80050d0:	9801      	ldr	r0, [sp, #4]
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	b933      	cbnz	r3, 80050e4 <_free_r+0x30>
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	6014      	str	r4, [r2, #0]
 80050da:	b003      	add	sp, #12
 80050dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050e0:	f7ff bf52 	b.w	8004f88 <__malloc_unlock>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d908      	bls.n	80050fa <_free_r+0x46>
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	1961      	adds	r1, r4, r5
 80050ec:	428b      	cmp	r3, r1
 80050ee:	bf01      	itttt	eq
 80050f0:	6819      	ldreq	r1, [r3, #0]
 80050f2:	685b      	ldreq	r3, [r3, #4]
 80050f4:	1949      	addeq	r1, r1, r5
 80050f6:	6021      	streq	r1, [r4, #0]
 80050f8:	e7ed      	b.n	80050d6 <_free_r+0x22>
 80050fa:	461a      	mov	r2, r3
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b10b      	cbz	r3, 8005104 <_free_r+0x50>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d9fa      	bls.n	80050fa <_free_r+0x46>
 8005104:	6811      	ldr	r1, [r2, #0]
 8005106:	1855      	adds	r5, r2, r1
 8005108:	42a5      	cmp	r5, r4
 800510a:	d10b      	bne.n	8005124 <_free_r+0x70>
 800510c:	6824      	ldr	r4, [r4, #0]
 800510e:	4421      	add	r1, r4
 8005110:	1854      	adds	r4, r2, r1
 8005112:	42a3      	cmp	r3, r4
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	d1e0      	bne.n	80050da <_free_r+0x26>
 8005118:	681c      	ldr	r4, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	6053      	str	r3, [r2, #4]
 800511e:	440c      	add	r4, r1
 8005120:	6014      	str	r4, [r2, #0]
 8005122:	e7da      	b.n	80050da <_free_r+0x26>
 8005124:	d902      	bls.n	800512c <_free_r+0x78>
 8005126:	230c      	movs	r3, #12
 8005128:	6003      	str	r3, [r0, #0]
 800512a:	e7d6      	b.n	80050da <_free_r+0x26>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	1961      	adds	r1, r4, r5
 8005130:	428b      	cmp	r3, r1
 8005132:	bf04      	itt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	6063      	str	r3, [r4, #4]
 800513a:	bf04      	itt	eq
 800513c:	1949      	addeq	r1, r1, r5
 800513e:	6021      	streq	r1, [r4, #0]
 8005140:	6054      	str	r4, [r2, #4]
 8005142:	e7ca      	b.n	80050da <_free_r+0x26>
 8005144:	b003      	add	sp, #12
 8005146:	bd30      	pop	{r4, r5, pc}
 8005148:	20004ac4 	.word	0x20004ac4

0800514c <_init>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr

08005158 <_fini>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr
